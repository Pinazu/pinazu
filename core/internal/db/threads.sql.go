// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: threads.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createThread = `-- name: CreateThread :one
INSERT INTO threads (title, created_at, updated_at, user_id) VALUES ($1, $2, $3, $4) RETURNING id, title, created_at, updated_at, user_id
`

type CreateThreadParams struct {
	Title     string             `db:"title" json:"title"`
	CreatedAt pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	UserID    uuid.UUID          `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRow(ctx, createThread,
		arg.Title,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteThread = `-- name: DeleteThread :exec
DELETE FROM threads WHERE id = $1
`

func (q *Queries) DeleteThread(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteThread, id)
	return err
}

const getThreadByID = `-- name: GetThreadByID :one
SELECT id, title, created_at, updated_at, user_id FROM threads WHERE user_id = $1 AND id = $2 LIMIT 1
`

type GetThreadByIDParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	ID     uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) GetThreadByID(ctx context.Context, arg GetThreadByIDParams) (Thread, error) {
	row := q.db.QueryRow(ctx, getThreadByID, arg.UserID, arg.ID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getThreads = `-- name: GetThreads :many
SELECT id, title, created_at, updated_at, user_id FROM threads WHERE user_id = $1 ORDER BY updated_at DESC
`

func (q *Queries) GetThreads(ctx context.Context, userID uuid.UUID) ([]Thread, error) {
	rows, err := q.db.Query(ctx, getThreads, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Thread{}
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateThread = `-- name: UpdateThread :one
UPDATE threads
SET title = $1
WHERE id = $2
RETURNING id, title, created_at, updated_at, user_id
`

type UpdateThreadParams struct {
	Title string    `db:"title" json:"title"`
	ID    uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateThread(ctx context.Context, arg UpdateThreadParams) (Thread, error) {
	row := q.db.QueryRow(ctx, updateThread, arg.Title, arg.ID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
