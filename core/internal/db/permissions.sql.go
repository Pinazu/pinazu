// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (name, description, content)
VALUES ($1, $2, $3)
RETURNING id, name, description, content, created_at, updated_at
`

type CreatePermissionParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Content     JsonRaw     `db:"content" json:"content"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission, arg.Name, arg.Description, arg.Content)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM permissions WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT id, name, description, content, created_at, updated_at FROM permissions ORDER BY name
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT id, name, description, content, created_at, updated_at FROM permissions WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPermissionByID(ctx context.Context, id uuid.UUID) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByID, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions
SET name = $1, description = $2, content = $3, updated_at = NOW()
WHERE id = $4
RETURNING id, name, description, content, created_at, updated_at
`

type UpdatePermissionParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Content     JsonRaw     `db:"content" json:"content"`
	ID          uuid.UUID   `db:"id" json:"id"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermission,
		arg.Name,
		arg.Description,
		arg.Content,
		arg.ID,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Content,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
