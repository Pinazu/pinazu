// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (thread_id, max_request_loop, additional_info, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id, thread_id, max_request_loop, additional_info, parent_task_id, created_at, created_by, updated_at
`

type CreateTaskParams struct {
	ThreadID       uuid.UUID `db:"thread_id" json:"thread_id"`
	MaxRequestLoop int32     `db:"max_request_loop" json:"max_request_loop"`
	AdditionalInfo JsonRaw   `db:"additional_info" json:"additional_info"`
	CreatedBy      uuid.UUID `db:"created_by" json:"created_by"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.ThreadID,
		arg.MaxRequestLoop,
		arg.AdditionalInfo,
		arg.CreatedBy,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.MaxRequestLoop,
		&i.AdditionalInfo,
		&i.ParentTaskID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const createTaskWithID = `-- name: CreateTaskWithID :one
INSERT INTO tasks (id, thread_id, max_request_loop, additional_info, created_by, parent_task_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, thread_id, max_request_loop, additional_info, parent_task_id, created_at, created_by, updated_at
`

type CreateTaskWithIDParams struct {
	ID             string      `db:"id" json:"id"`
	ThreadID       uuid.UUID   `db:"thread_id" json:"thread_id"`
	MaxRequestLoop int32       `db:"max_request_loop" json:"max_request_loop"`
	AdditionalInfo JsonRaw     `db:"additional_info" json:"additional_info"`
	CreatedBy      uuid.UUID   `db:"created_by" json:"created_by"`
	ParentTaskID   pgtype.Text `db:"parent_task_id" json:"parent_task_id"`
}

func (q *Queries) CreateTaskWithID(ctx context.Context, arg CreateTaskWithIDParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTaskWithID,
		arg.ID,
		arg.ThreadID,
		arg.MaxRequestLoop,
		arg.AdditionalInfo,
		arg.CreatedBy,
		arg.ParentTaskID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.MaxRequestLoop,
		&i.AdditionalInfo,
		&i.ParentTaskID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTask, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, thread_id, max_request_loop, additional_info, parent_task_id, created_at, created_by, updated_at FROM tasks WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTaskById(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.MaxRequestLoop,
		&i.AdditionalInfo,
		&i.ParentTaskID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, thread_id, max_request_loop, additional_info, parent_task_id, created_at, created_by, updated_at FROM tasks ORDER BY created_at DESC LIMIT $1 OFFSET $2
`

type GetTasksParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.MaxRequestLoop,
			&i.AdditionalInfo,
			&i.ParentTaskID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByThreadId = `-- name: GetTasksByThreadId :many
SELECT id, thread_id, max_request_loop, additional_info, parent_task_id, created_at, created_by, updated_at FROM tasks WHERE thread_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetTasksByThreadId(ctx context.Context, threadID uuid.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByThreadId, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.MaxRequestLoop,
			&i.AdditionalInfo,
			&i.ParentTaskID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET max_request_loop = $1, additional_info = $2
WHERE id = $3
RETURNING id, thread_id, max_request_loop, additional_info, parent_task_id, created_at, created_by, updated_at
`

type UpdateTaskParams struct {
	MaxRequestLoop int32   `db:"max_request_loop" json:"max_request_loop"`
	AdditionalInfo JsonRaw `db:"additional_info" json:"additional_info"`
	ID             string  `db:"id" json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask, arg.MaxRequestLoop, arg.AdditionalInfo, arg.ID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.MaxRequestLoop,
		&i.AdditionalInfo,
		&i.ParentTaskID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}
