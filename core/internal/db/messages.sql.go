// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAgentMessage = `-- name: CreateAgentMessage :one
INSERT INTO thread_messages (thread_id, message, sender_type, stop_reason, sender_id, citations, recipient_id)
VALUES ($1, $2, 'assistant', $3, $4, $5, $6)
RETURNING id, thread_id, message, sender_type, result_type, stop_reason, created_at, updated_at, sender_id, citations, recipient_id
`

type CreateAgentMessageParams struct {
	ThreadID    uuid.UUID   `db:"thread_id" json:"thread_id"`
	Message     JsonRaw     `db:"message" json:"message"`
	StopReason  pgtype.Text `db:"stop_reason" json:"stop_reason"`
	SenderID    uuid.UUID   `db:"sender_id" json:"sender_id"`
	Citations   []JsonRaw   `db:"citations" json:"citations"`
	RecipientID uuid.UUID   `db:"recipient_id" json:"recipient_id"`
}

func (q *Queries) CreateAgentMessage(ctx context.Context, arg CreateAgentMessageParams) (ThreadMessage, error) {
	row := q.db.QueryRow(ctx, createAgentMessage,
		arg.ThreadID,
		arg.Message,
		arg.StopReason,
		arg.SenderID,
		arg.Citations,
		arg.RecipientID,
	)
	var i ThreadMessage
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Message,
		&i.SenderType,
		&i.ResultType,
		&i.StopReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SenderID,
		&i.Citations,
		&i.RecipientID,
	)
	return i, err
}

const createCustomMessage = `-- name: CreateCustomMessage :one
INSERT INTO thread_messages (thread_id, message, sender_type, result_type, stop_reason, sender_id, citations, recipient_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, thread_id, message, sender_type, result_type, stop_reason, created_at, updated_at, sender_id, citations, recipient_id
`

type CreateCustomMessageParams struct {
	ThreadID    uuid.UUID          `db:"thread_id" json:"thread_id"`
	Message     JsonRaw            `db:"message" json:"message"`
	SenderType  SenderMessageType  `db:"sender_type" json:"sender_type"`
	ResultType  *ResultMessageType `db:"result_type" json:"result_type"`
	StopReason  pgtype.Text        `db:"stop_reason" json:"stop_reason"`
	SenderID    uuid.UUID          `db:"sender_id" json:"sender_id"`
	Citations   []JsonRaw          `db:"citations" json:"citations"`
	RecipientID uuid.UUID          `db:"recipient_id" json:"recipient_id"`
}

func (q *Queries) CreateCustomMessage(ctx context.Context, arg CreateCustomMessageParams) (ThreadMessage, error) {
	row := q.db.QueryRow(ctx, createCustomMessage,
		arg.ThreadID,
		arg.Message,
		arg.SenderType,
		arg.ResultType,
		arg.StopReason,
		arg.SenderID,
		arg.Citations,
		arg.RecipientID,
	)
	var i ThreadMessage
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Message,
		&i.SenderType,
		&i.ResultType,
		&i.StopReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SenderID,
		&i.Citations,
		&i.RecipientID,
	)
	return i, err
}

const createResultMessage = `-- name: CreateResultMessage :one
INSERT INTO thread_messages (thread_id, message, sender_type, result_type, sender_id, recipient_id)
VALUES ($1, $2, "result", $3, $4, $5)
RETURNING id, thread_id, message, sender_type, result_type, stop_reason, created_at, updated_at, sender_id, citations, recipient_id
`

type CreateResultMessageParams struct {
	ThreadID    uuid.UUID          `db:"thread_id" json:"thread_id"`
	Message     JsonRaw            `db:"message" json:"message"`
	ResultType  *ResultMessageType `db:"result_type" json:"result_type"`
	SenderID    uuid.UUID          `db:"sender_id" json:"sender_id"`
	RecipientID uuid.UUID          `db:"recipient_id" json:"recipient_id"`
}

func (q *Queries) CreateResultMessage(ctx context.Context, arg CreateResultMessageParams) (ThreadMessage, error) {
	row := q.db.QueryRow(ctx, createResultMessage,
		arg.ThreadID,
		arg.Message,
		arg.ResultType,
		arg.SenderID,
		arg.RecipientID,
	)
	var i ThreadMessage
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Message,
		&i.SenderType,
		&i.ResultType,
		&i.StopReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SenderID,
		&i.Citations,
		&i.RecipientID,
	)
	return i, err
}

const createUserMessage = `-- name: CreateUserMessage :one
INSERT INTO thread_messages (thread_id, message, sender_type, sender_id, recipient_id)
VALUES ($1, $2, 'user', $3, $4)
RETURNING id, thread_id, message, sender_type, result_type, stop_reason, created_at, updated_at, sender_id, citations, recipient_id
`

type CreateUserMessageParams struct {
	ThreadID    uuid.UUID `db:"thread_id" json:"thread_id"`
	Message     JsonRaw   `db:"message" json:"message"`
	SenderID    uuid.UUID `db:"sender_id" json:"sender_id"`
	RecipientID uuid.UUID `db:"recipient_id" json:"recipient_id"`
}

func (q *Queries) CreateUserMessage(ctx context.Context, arg CreateUserMessageParams) (ThreadMessage, error) {
	row := q.db.QueryRow(ctx, createUserMessage,
		arg.ThreadID,
		arg.Message,
		arg.SenderID,
		arg.RecipientID,
	)
	var i ThreadMessage
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Message,
		&i.SenderType,
		&i.ResultType,
		&i.StopReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SenderID,
		&i.Citations,
		&i.RecipientID,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM thread_messages WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMessage, id)
	return err
}

const getMessageByID = `-- name: GetMessageByID :one
SELECT id, thread_id, message, sender_type, result_type, stop_reason, created_at, updated_at, sender_id, citations, recipient_id FROM thread_messages WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMessageByID(ctx context.Context, id uuid.UUID) (ThreadMessage, error) {
	row := q.db.QueryRow(ctx, getMessageByID, id)
	var i ThreadMessage
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Message,
		&i.SenderType,
		&i.ResultType,
		&i.StopReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SenderID,
		&i.Citations,
		&i.RecipientID,
	)
	return i, err
}

const getMessageContents = `-- name: GetMessageContents :many
SELECT message FROM thread_messages WHERE thread_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetMessageContents(ctx context.Context, threadID uuid.UUID) ([]JsonRaw, error) {
	rows, err := q.db.Query(ctx, getMessageContents, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JsonRaw{}
	for rows.Next() {
		var message JsonRaw
		if err := rows.Scan(&message); err != nil {
			return nil, err
		}
		items = append(items, message)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessages = `-- name: GetMessages :many
SELECT id, thread_id, message, sender_type, result_type, stop_reason, created_at, updated_at, sender_id, citations, recipient_id FROM thread_messages WHERE thread_id = $1 ORDER BY created_at ASC
`

func (q *Queries) GetMessages(ctx context.Context, threadID uuid.UUID) ([]ThreadMessage, error) {
	rows, err := q.db.Query(ctx, getMessages, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ThreadMessage{}
	for rows.Next() {
		var i ThreadMessage
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Message,
			&i.SenderType,
			&i.ResultType,
			&i.StopReason,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SenderID,
			&i.Citations,
			&i.RecipientID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSenderRecipientMessages = `-- name: GetSenderRecipientMessages :many
SELECT message FROM thread_messages WHERE thread_id = $1 AND ((sender_id = $2 AND recipient_id = $3) OR (sender_id = $3 AND recipient_id = $2)) ORDER BY created_at ASC
`

type GetSenderRecipientMessagesParams struct {
	ThreadID    uuid.UUID `db:"thread_id" json:"thread_id"`
	SenderID    uuid.UUID `db:"sender_id" json:"sender_id"`
	RecipientID uuid.UUID `db:"recipient_id" json:"recipient_id"`
}

func (q *Queries) GetSenderRecipientMessages(ctx context.Context, arg GetSenderRecipientMessagesParams) ([]JsonRaw, error) {
	rows, err := q.db.Query(ctx, getSenderRecipientMessages, arg.ThreadID, arg.SenderID, arg.RecipientID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []JsonRaw{}
	for rows.Next() {
		var message JsonRaw
		if err := rows.Scan(&message); err != nil {
			return nil, err
		}
		items = append(items, message)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE thread_messages
SET message = $1
WHERE id = $2
RETURNING id, thread_id, message, sender_type, result_type, stop_reason, created_at, updated_at, sender_id, citations, recipient_id
`

type UpdateMessageParams struct {
	Message JsonRaw   `db:"message" json:"message"`
	ID      uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (ThreadMessage, error) {
	row := q.db.QueryRow(ctx, updateMessage, arg.Message, arg.ID)
	var i ThreadMessage
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Message,
		&i.SenderType,
		&i.ResultType,
		&i.StopReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SenderID,
		&i.Citations,
		&i.RecipientID,
	)
	return i, err
}
