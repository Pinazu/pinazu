// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addRoleToUser = `-- name: AddRoleToUser :one
INSERT INTO user_role_mapping (user_id, role_id, assigned_by)
VALUES ($1, $2, $3)
RETURNING mapping_id, user_id, role_id, assigned_at, assigned_by
`

type AddRoleToUserParams struct {
	UserID     uuid.UUID `db:"user_id" json:"user_id"`
	RoleID     uuid.UUID `db:"role_id" json:"role_id"`
	AssignedBy uuid.UUID `db:"assigned_by" json:"assigned_by"`
}

func (q *Queries) AddRoleToUser(ctx context.Context, arg AddRoleToUserParams) (UserRoleMapping, error) {
	row := q.db.QueryRow(ctx, addRoleToUser, arg.UserID, arg.RoleID, arg.AssignedBy)
	var i UserRoleMapping
	err := row.Scan(
		&i.MappingID,
		&i.UserID,
		&i.RoleID,
		&i.AssignedAt,
		&i.AssignedBy,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name,email,additional_info,password_hash,provider_name)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, additional_info, provider_name, is_online, created_at, updated_at
`

type CreateUserParams struct {
	Name           string       `db:"name" json:"name"`
	Email          string       `db:"email" json:"email"`
	AdditionalInfo JsonRaw      `db:"additional_info" json:"additional_info"`
	PasswordHash   string       `db:"password_hash" json:"password_hash"`
	ProviderName   ProviderName `db:"provider_name" json:"provider_name"`
}

type CreateUserRow struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	Name           string             `db:"name" json:"name"`
	Email          string             `db:"email" json:"email"`
	AdditionalInfo JsonRaw            `db:"additional_info" json:"additional_info"`
	ProviderName   ProviderName       `db:"provider_name" json:"provider_name"`
	IsOnline       pgtype.Bool        `db:"is_online" json:"is_online"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.AdditionalInfo,
		arg.PasswordHash,
		arg.ProviderName,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.AdditionalInfo,
		&i.ProviderName,
		&i.IsOnline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getPasswordHashByID = `-- name: GetPasswordHashByID :one
SELECT password_hash FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPasswordHashByID(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getPasswordHashByID, id)
	var password_hash string
	err := row.Scan(&password_hash)
	return password_hash, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, additional_info, provider_name, is_online, created_at, updated_at FROM users WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	Name           string             `db:"name" json:"name"`
	Email          string             `db:"email" json:"email"`
	AdditionalInfo JsonRaw            `db:"additional_info" json:"additional_info"`
	ProviderName   ProviderName       `db:"provider_name" json:"provider_name"`
	IsOnline       pgtype.Bool        `db:"is_online" json:"is_online"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.AdditionalInfo,
		&i.ProviderName,
		&i.IsOnline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, additional_info, provider_name, is_online, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

type GetUserByIDRow struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	Name           string             `db:"name" json:"name"`
	Email          string             `db:"email" json:"email"`
	AdditionalInfo JsonRaw            `db:"additional_info" json:"additional_info"`
	ProviderName   ProviderName       `db:"provider_name" json:"provider_name"`
	IsOnline       pgtype.Bool        `db:"is_online" json:"is_online"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.AdditionalInfo,
		&i.ProviderName,
		&i.IsOnline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, additional_info, provider_name, is_online, created_at, updated_at FROM users ORDER BY name
`

type GetUsersRow struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	Name           string             `db:"name" json:"name"`
	Email          string             `db:"email" json:"email"`
	AdditionalInfo JsonRaw            `db:"additional_info" json:"additional_info"`
	ProviderName   ProviderName       `db:"provider_name" json:"provider_name"`
	IsOnline       pgtype.Bool        `db:"is_online" json:"is_online"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.AdditionalInfo,
			&i.ProviderName,
			&i.IsOnline,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesForUser = `-- name: ListRolesForUser :many
SELECT mapping_id, user_id, role_id, assigned_at, assigned_by FROM user_role_mapping WHERE user_id = $1 ORDER BY assigned_at DESC
`

func (q *Queries) ListRolesForUser(ctx context.Context, userID uuid.UUID) ([]UserRoleMapping, error) {
	rows, err := q.db.Query(ctx, listRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserRoleMapping{}
	for rows.Next() {
		var i UserRoleMapping
		if err := rows.Scan(
			&i.MappingID,
			&i.UserID,
			&i.RoleID,
			&i.AssignedAt,
			&i.AssignedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM user_role_mapping WHERE user_id = $1 AND role_id = $2
`

type RemoveRoleFromUserParams struct {
	UserID uuid.UUID `db:"user_id" json:"user_id"`
	RoleID uuid.UUID `db:"role_id" json:"role_id"`
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.Exec(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = $1, email = $2, additional_info = $3, provider_name = $4
WHERE id = $5
RETURNING id, name, email, additional_info, provider_name, is_online, created_at, updated_at
`

type UpdateUserParams struct {
	Name           string       `db:"name" json:"name"`
	Email          string       `db:"email" json:"email"`
	AdditionalInfo JsonRaw      `db:"additional_info" json:"additional_info"`
	ProviderName   ProviderName `db:"provider_name" json:"provider_name"`
	ID             uuid.UUID    `db:"id" json:"id"`
}

type UpdateUserRow struct {
	ID             uuid.UUID          `db:"id" json:"id"`
	Name           string             `db:"name" json:"name"`
	Email          string             `db:"email" json:"email"`
	AdditionalInfo JsonRaw            `db:"additional_info" json:"additional_info"`
	ProviderName   ProviderName       `db:"provider_name" json:"provider_name"`
	IsOnline       pgtype.Bool        `db:"is_online" json:"is_online"`
	CreatedAt      pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.AdditionalInfo,
		arg.ProviderName,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.AdditionalInfo,
		&i.ProviderName,
		&i.IsOnline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserOnlineState = `-- name: UpdateUserOnlineState :exec
UPDATE users
SET is_online = $1
WHERE id = $2
`

type UpdateUserOnlineStateParams struct {
	IsOnline pgtype.Bool `db:"is_online" json:"is_online"`
	ID       uuid.UUID   `db:"id" json:"id"`
}

func (q *Queries) UpdateUserOnlineState(ctx context.Context, arg UpdateUserOnlineStateParams) error {
	_, err := q.db.Exec(ctx, updateUserOnlineState, arg.IsOnline, arg.ID)
	return err
}
