// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/anthropics/anthropic-sdk-go"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
	db "github.com/pinazu/core/internal/db"
)

// AddPermissionToAgentRequest defines model for AddPermissionToAgentRequest.
type AddPermissionToAgentRequest struct {
	AssignedBy   *uuid.UUID `json:"assigned_by,omitempty"`
	PermissionId uuid.UUID  `json:"permission_id"`
}

// AddPermissionToRoleRequest defines model for AddPermissionToRoleRequest.
type AddPermissionToRoleRequest struct {
	AssignedBy   *uuid.UUID `json:"assigned_by,omitempty"`
	PermissionId uuid.UUID  `json:"permission_id"`
}

// AddRoleToUserRequest defines model for AddRoleToUserRequest.
type AddRoleToUserRequest struct {
	AssignedBy *uuid.UUID `json:"assigned_by,omitempty"`
	RoleId     uuid.UUID  `json:"role_id"`
}

// Agent defines model for Agent.
type Agent = db.Agent

// AgentList defines model for AgentList.
type AgentList struct {
	Agents     []Agent `json:"agents"`
	Page       int32   `json:"page"`
	PerPage    int32   `json:"per_page"`
	Total      int     `json:"total"`
	TotalPages int     `json:"total_pages"`
}

// AgentPermissionMapping defines model for AgentPermissionMapping.
type AgentPermissionMapping = db.AgentPermissionMapping

// AgentPermissionMappingList defines model for AgentPermissionMappingList.
type AgentPermissionMappingList struct {
	Page               int32                    `json:"page"`
	PerPage            int32                    `json:"per_page"`
	PermissionMappings []AgentPermissionMapping `json:"permissionMappings"`
	Total              int                      `json:"total"`
	TotalPages         int                      `json:"total_pages"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	// Message Error message indicating the bad request
	Message string `json:"message"`
}

// CreateAgentRequest defines model for CreateAgentRequest.
type CreateAgentRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`

	// Specs YAML specification for the agent
	Specs *string `json:"specs,omitempty"`
}

// CreateFlowRequest defines model for CreateFlowRequest.
type CreateFlowRequest struct {
	// AdditionalInfo Additional information related to the flow
	AdditionalInfo *map[string]interface{} `json:"additional_info,omitempty"`

	// CodeLocation Location of the code for the flow
	CodeLocation string `json:"code_location"`

	// Description Description of the flow
	Description *string `json:"description,omitempty"`

	// Engine The engine used for the flow
	Engine string `json:"engine"`

	// Entrypoint Entrypoint for the flow
	Entrypoint string `json:"entrypoint"`

	// Name Name of the flow
	Name string `json:"name"`

	// ParametersSchema Schema for the parameters of the flow
	ParametersSchema map[string]interface{} `json:"parameters_schema"`

	// Tags Tags associated with the flow
	Tags *[]string `json:"tags,omitempty"`
}

// CreateMessageRequest defines model for CreateMessageRequest.
type CreateMessageRequest struct {
	// Message JSON message content
	Message     db.JsonRaw `json:"message"`
	RecipientId uuid.UUID  `json:"recipient_id"`
	SenderId    uuid.UUID  `json:"sender_id"`
}

// CreatePermissionRequest defines model for CreatePermissionRequest.
type CreatePermissionRequest struct {
	// Content Permission content in JSON format
	Content     db.JsonRaw   `json:"content"`
	Description *pgtype.Text `json:"description"`
	Name        string       `json:"name"`
}

// CreateRoleRequest defines model for CreateRoleRequest.
type CreateRoleRequest struct {
	Description *pgtype.Text `json:"description"`

	// IsSystemRole Whether this is a system-managed role
	IsSystemRole *pgtype.Bool `json:"is_system_role"`
	Name         string       `json:"name"`
}

// CreateTaskRequest defines model for CreateTaskRequest.
type CreateTaskRequest struct {
	// AdditionalInfo Additional information related to the task
	AdditionalInfo *db.JsonRaw `json:"additional_info,omitempty"`

	// MaxRequestLoop Maximum number of request loops for the task
	MaxRequestLoop *int `json:"max_request_loop,omitempty"`

	// ThreadId ID of the thread associated with this task
	ThreadId uuid.UUID `json:"thread_id"`
}

// CreateThreadRequest defines model for CreateThreadRequest.
type CreateThreadRequest struct {
	Title  string    `json:"title"`
	UserId uuid.UUID `json:"user_id"`
}

// CreateToolRequest defines model for CreateToolRequest.
type CreateToolRequest struct {
	Config      db.ToolConfig `json:"config"`
	Description *pgtype.Text  `json:"description"`
	Name        string        `json:"name"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// AdditionalInfo Additional user information in JSON format
	AdditionalInfo *db.JsonRaw         `json:"additional_info,omitempty"`
	Email          openapi_types.Email `json:"email"`
	Name           string              `json:"name"`

	// PasswordHash Securely hashed password
	PasswordHash string `json:"password_hash"`

	// ProviderName Authentication provider (local, google, etc.)
	ProviderName *db.ProviderName `json:"provider_name,omitempty"`
}

// ExecuteFlowRequest defines model for ExecuteFlowRequest.
type ExecuteFlowRequest struct {
	// Parameters Parameters for the flow execution
	Parameters map[string]interface{} `json:"parameters"`
}

// ExecuteTaskRequest defines model for ExecuteTaskRequest.
type ExecuteTaskRequest struct {
	// AgentId ID of the agent to execute the task
	AgentId uuid.UUID `json:"agent_id"`

	// CurrentLoops Starting number of loops for the task execution
	CurrentLoops *int `json:"current_loops,omitempty"`
}

// Flow defines model for Flow.
type Flow = db.Flow

// FlowList defines model for FlowList.
type FlowList struct {
	Flows      []Flow `json:"flows"`
	Page       int32  `json:"page"`
	PerPage    int32  `json:"per_page"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
}

// FlowRun defines model for FlowRun.
type FlowRun = db.FlowRun

// MCPTool defines model for MCPTool.
type MCPTool struct {
	// ApiKey Optional API key for the MCP tool
	ApiKey *string `json:"api_key"`

	// Entrypoint MCP entry point for the tool
	Entrypoint string `json:"entrypoint"`

	// EnvVars Environment variables for the MCP tool
	EnvVars *map[string]string `json:"env_vars"`

	// Protocol Protocol used by the MCP tool
	Protocol db.MCPProtocol `json:"protocol"`
	Type     db.ToolType    `json:"type"`
}

// Message defines model for Message.
type Message = db.ThreadMessage

// MessageList defines model for MessageList.
type MessageList struct {
	Messages   []Message `json:"messages"`
	Page       int32     `json:"page"`
	PerPage    int32     `json:"per_page"`
	Total      int       `json:"total"`
	TotalPages int       `json:"total_pages"`
}

// MockToolRequest defines model for MockToolRequest.
type MockToolRequest struct {
	Input string `json:"input"`
}

// MockToolResponse defines model for MockToolResponse.
type MockToolResponse struct {
	Citation []anthropic.TextCitationParamUnion `json:"citation"`
	Text     string                             `json:"text"`
}

// MockToolWithDelayRequest defines model for MockToolWithDelayRequest.
type MockToolWithDelayRequest struct {
	Input string `json:"input"`
}

// MockToolWithDelayResponse defines model for MockToolWithDelayResponse.
type MockToolWithDelayResponse struct {
	Citation []anthropic.TextCitationParamUnion `json:"citation"`
	Text     string                             `json:"text"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Id The ID of the resource that was not found
	Id openapi_types.UUID `json:"id"`

	// Message Error message indicating the resource was not found
	Message string `json:"message"`

	// Resource The resource that was not found
	Resource string `json:"resource"`
}

// PaginationMeta defines model for PaginationMeta.
type PaginationMeta struct {
	Page       int32 `json:"page"`
	PerPage    int32 `json:"per_page"`
	Total      int   `json:"total"`
	TotalPages int   `json:"total_pages"`
}

// Permission defines model for Permission.
type Permission = db.Permission

// PermissionList defines model for PermissionList.
type PermissionList struct {
	Page        int32        `json:"page"`
	PerPage     int32        `json:"per_page"`
	Permissions []Permission `json:"permissions"`
	Total       int          `json:"total"`
	TotalPages  int          `json:"total_pages"`
}

// ResourceAlreadyExists defines model for ResourceAlreadyExists.
type ResourceAlreadyExists struct {
	// Id The ID of the resource that already exists
	Id openapi_types.UUID `json:"id"`

	// Message Error message indicating the resource already exists
	Message string `json:"message"`

	// Resource The resource that already exists
	Resource string `json:"resource"`
}

// Role defines model for Role.
type Role = db.Role

// RoleList defines model for RoleList.
type RoleList struct {
	Page       int32  `json:"page"`
	PerPage    int32  `json:"per_page"`
	Roles      []Role `json:"roles"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
}

// RolePermissionMapping defines model for RolePermissionMapping.
type RolePermissionMapping = db.RolePermissionMapping

// RolePermissionMappingList defines model for RolePermissionMappingList.
type RolePermissionMappingList = []RolePermissionMapping

// StandaloneTool defines model for StandaloneTool.
type StandaloneTool struct {
	// ApiKey Optional API KEY for the tool server
	ApiKey *string `json:"api_key,omitempty"`

	// Params JSON request structure for the tool
	Params openapi3.Schema `json:"params"`
	Type   db.ToolType     `json:"type"`

	// Url URL path to the server
	Url string `json:"url"`
}

// Task defines model for Task.
type Task = db.Task

// TaskList defines model for TaskList.
type TaskList struct {
	Page       int32  `json:"page"`
	PerPage    int32  `json:"per_page"`
	Tasks      []Task `json:"tasks"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
}

// TaskRun defines model for TaskRun.
type TaskRun = db.TasksRun

// Thread defines model for Thread.
type Thread = db.Thread

// ThreadList defines model for ThreadList.
type ThreadList struct {
	Page       int32    `json:"page"`
	PerPage    int32    `json:"per_page"`
	Threads    []Thread `json:"threads"`
	Total      int      `json:"total"`
	TotalPages int      `json:"total_pages"`
}

// Tool defines model for Tool.
type Tool = db.Tool

// ToolList defines model for ToolList.
type ToolList struct {
	Page       int32  `json:"page"`
	PerPage    int32  `json:"per_page"`
	Tools      []Tool `json:"tools"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
}

// UpdateAgentRequest defines model for UpdateAgentRequest.
type UpdateAgentRequest struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`

	// Specs YAML specification for the agent
	Specs *string `json:"specs,omitempty"`
}

// UpdateFlowRequest defines model for UpdateFlowRequest.
type UpdateFlowRequest struct {
	// AdditionalInfo Additional information related to the flow
	AdditionalInfo *map[string]interface{} `json:"additional_info,omitempty"`

	// CodeLocation Location of the code for the flow
	CodeLocation *string `json:"code_location,omitempty"`

	// Description Description of the flow
	Description *string `json:"description,omitempty"`

	// Engine The engine used for the flow
	Engine *string `json:"engine,omitempty"`

	// Entrypoint Entrypoint for the flow
	Entrypoint *string `json:"entrypoint,omitempty"`

	// Name Name of the flow
	Name *string `json:"name,omitempty"`

	// Tags Tags associated with the flow
	Tags *[]string `json:"tags,omitempty"`
}

// UpdateMessageRequest defines model for UpdateMessageRequest.
type UpdateMessageRequest struct {
	// Message JSON message content
	Message db.JsonRaw `json:"message"`
}

// UpdatePermissionRequest defines model for UpdatePermissionRequest.
type UpdatePermissionRequest struct {
	// Content Permission content in JSON format
	Content     *db.JsonRaw  `json:"content,omitempty"`
	Description *pgtype.Text `json:"description"`
	Name        *string      `json:"name,omitempty"`
}

// UpdateRoleRequest defines model for UpdateRoleRequest.
type UpdateRoleRequest struct {
	Description *pgtype.Text `json:"description"`

	// IsSystemRole Whether this is a system-managed role
	IsSystemRole *pgtype.Bool `json:"is_system_role"`
	Name         *string      `json:"name,omitempty"`
}

// UpdateTaskRequest defines model for UpdateTaskRequest.
type UpdateTaskRequest struct {
	// AdditionalInfo Additional information related to the task
	AdditionalInfo *db.JsonRaw `json:"additional_info,omitempty"`

	// MaxRequestLoop Maximum number of request loops for the task
	MaxRequestLoop *int `json:"max_request_loop,omitempty"`
}

// UpdateThreadRequest defines model for UpdateThreadRequest.
type UpdateThreadRequest struct {
	Title string `json:"title"`
}

// UpdateToolRequest defines model for UpdateToolRequest.
type UpdateToolRequest struct {
	Config      *db.ToolConfig `json:"config,omitempty"`
	Description *pgtype.Text   `json:"description"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	// AdditionalInfo Additional user information in JSON format
	AdditionalInfo *map[string]interface{} `json:"additional_info,omitempty"`
	Email          *openapi_types.Email    `json:"email,omitempty"`

	// ProviderName Authentication provider (local, google, etc.)
	ProviderName *db.ProviderName `json:"provider_name,omitempty"`
	Username     *string          `json:"username,omitempty"`
}

// User defines model for User.
type User = db.GetUsersRow

// UserList defines model for UserList.
type UserList struct {
	Page       int32  `json:"page"`
	PerPage    int32  `json:"per_page"`
	Total      int    `json:"total"`
	TotalPages int    `json:"total_pages"`
	Users      []User `json:"users"`
}

// UserRoleMapping defines model for UserRoleMapping.
type UserRoleMapping = db.UserRoleMapping

// UserRoleMappingList defines model for UserRoleMappingList.
type UserRoleMappingList = []UserRoleMapping

// WorkflowTool defines model for WorkflowTool.
type WorkflowTool struct {
	// Params JSON request structure for the tool
	Params openapi3.Schema `json:"params"`

	// S3Url S3 or HTTP/HTTPS URL path to the workflow
	S3Url string      `json:"s3_url"`
	Type  db.ToolType `json:"type"`
}

// PageParam defines model for pageParam.
type PageParam = int32

// PerPageParam defines model for perPageParam.
type PerPageParam = int32

// ListFlowsParams defines parameters for ListFlows.
type ListFlowsParams struct {
	// PerPage Limits the number of returned results
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number for paginated results
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`
}

// ListTasksParams defines parameters for ListTasks.
type ListTasksParams struct {
	// PerPage Limits the number of returned results
	PerPage *PerPageParam `form:"per_page,omitempty" json:"per_page,omitempty"`

	// Page Page number for paginated results
	Page *PageParam `form:"page,omitempty" json:"page,omitempty"`
}

// CreateAgentJSONRequestBody defines body for CreateAgent for application/json ContentType.
type CreateAgentJSONRequestBody = CreateAgentRequest

// UpdateAgentJSONRequestBody defines body for UpdateAgent for application/json ContentType.
type UpdateAgentJSONRequestBody = UpdateAgentRequest

// AddPermissionToAgentJSONRequestBody defines body for AddPermissionToAgent for application/json ContentType.
type AddPermissionToAgentJSONRequestBody = AddPermissionToAgentRequest

// CreateFlowJSONRequestBody defines body for CreateFlow for application/json ContentType.
type CreateFlowJSONRequestBody = CreateFlowRequest

// UpdateFlowJSONRequestBody defines body for UpdateFlow for application/json ContentType.
type UpdateFlowJSONRequestBody = UpdateFlowRequest

// ExecuteFlowJSONRequestBody defines body for ExecuteFlow for application/json ContentType.
type ExecuteFlowJSONRequestBody = ExecuteFlowRequest

// MockStandaloneToolJSONRequestBody defines body for MockStandaloneTool for application/json ContentType.
type MockStandaloneToolJSONRequestBody = MockToolRequest

// MockStandaloneToolWithDelayJSONRequestBody defines body for MockStandaloneToolWithDelay for application/json ContentType.
type MockStandaloneToolWithDelayJSONRequestBody = MockToolWithDelayRequest

// CreatePermissionJSONRequestBody defines body for CreatePermission for application/json ContentType.
type CreatePermissionJSONRequestBody = CreatePermissionRequest

// UpdatePermissionJSONRequestBody defines body for UpdatePermission for application/json ContentType.
type UpdatePermissionJSONRequestBody = UpdatePermissionRequest

// CreateRoleJSONRequestBody defines body for CreateRole for application/json ContentType.
type CreateRoleJSONRequestBody = CreateRoleRequest

// UpdateRoleJSONRequestBody defines body for UpdateRole for application/json ContentType.
type UpdateRoleJSONRequestBody = UpdateRoleRequest

// AddPermissionToRoleJSONRequestBody defines body for AddPermissionToRole for application/json ContentType.
type AddPermissionToRoleJSONRequestBody = AddPermissionToRoleRequest

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTaskRequest

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = UpdateTaskRequest

// ExecuteTaskJSONRequestBody defines body for ExecuteTask for application/json ContentType.
type ExecuteTaskJSONRequestBody = ExecuteTaskRequest

// CreateThreadJSONRequestBody defines body for CreateThread for application/json ContentType.
type CreateThreadJSONRequestBody = CreateThreadRequest

// UpdateThreadTitleJSONRequestBody defines body for UpdateThreadTitle for application/json ContentType.
type UpdateThreadTitleJSONRequestBody = UpdateThreadRequest

// CreateMessageJSONRequestBody defines body for CreateMessage for application/json ContentType.
type CreateMessageJSONRequestBody = CreateMessageRequest

// UpdateMessageJSONRequestBody defines body for UpdateMessage for application/json ContentType.
type UpdateMessageJSONRequestBody = UpdateMessageRequest

// CreateToolJSONRequestBody defines body for CreateTool for application/json ContentType.
type CreateToolJSONRequestBody = CreateToolRequest

// UpdateToolJSONRequestBody defines body for UpdateTool for application/json ContentType.
type UpdateToolJSONRequestBody = UpdateToolRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// AddRoleToUserJSONRequestBody defines body for AddRoleToUser for application/json ContentType.
type AddRoleToUserJSONRequestBody = AddRoleToUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all agents
	// (GET /v1/agents)
	ListAgents(w http.ResponseWriter, r *http.Request)
	// Create a new agent
	// (POST /v1/agents)
	CreateAgent(w http.ResponseWriter, r *http.Request)
	// Delete agent
	// (DELETE /v1/agents/{agent_id})
	DeleteAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Get agent by ID
	// (GET /v1/agents/{agent_id})
	GetAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Update agent
	// (PUT /v1/agents/{agent_id})
	UpdateAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// List permissions for agent mapping
	// (GET /v1/agents/{agent_id}/permissions)
	ListPermissionsForAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Add permission to agent
	// (POST /v1/agents/{agent_id}/permissions)
	AddPermissionToAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID)
	// Remove permission from agent
	// (DELETE /v1/agents/{agent_id}/permissions/{permission_id})
	RemovePermissionFromAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, permissionId openapi_types.UUID)
	// List all flows
	// (GET /v1/flows)
	ListFlows(w http.ResponseWriter, r *http.Request, params ListFlowsParams)
	// Create a new flow
	// (POST /v1/flows)
	CreateFlow(w http.ResponseWriter, r *http.Request)
	// Delete a flow
	// (DELETE /v1/flows/{flow_id})
	DeleteFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID)
	// Get flow by ID
	// (GET /v1/flows/{flow_id})
	GetFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID)
	// Update an existing flow
	// (PUT /v1/flows/{flow_id})
	UpdateFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID)
	// Execute a flow
	// (POST /v1/flows/{flow_id}/execute)
	ExecuteFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID)
	// Get flow run by ID
	// (GET /v1/flows/{flow_run_id}/status)
	GetFlowRun(w http.ResponseWriter, r *http.Request, flowRunId openapi_types.UUID)
	// Mock standalone server
	// (POST /v1/mock/tool)
	MockStandaloneTool(w http.ResponseWriter, r *http.Request)
	// Mock standalone server with delay
	// (POST /v1/mock/tool_with_delay)
	MockStandaloneToolWithDelay(w http.ResponseWriter, r *http.Request)
	// List all permissions
	// (GET /v1/permissions)
	ListPermissions(w http.ResponseWriter, r *http.Request)
	// Create a new permission
	// (POST /v1/permissions)
	CreatePermission(w http.ResponseWriter, r *http.Request)
	// Delete permission
	// (DELETE /v1/permissions/{permission_id})
	DeletePermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID)
	// Get permission by ID
	// (GET /v1/permissions/{permission_id})
	GetPermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID)
	// Update permission
	// (PUT /v1/permissions/{permission_id})
	UpdatePermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID)
	// List all roles
	// (GET /v1/roles)
	ListRoles(w http.ResponseWriter, r *http.Request)
	// Create a new role
	// (POST /v1/roles)
	CreateRole(w http.ResponseWriter, r *http.Request)
	// Delete role
	// (DELETE /v1/roles/{role_id})
	DeleteRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID)
	// Get role by ID
	// (GET /v1/roles/{role_id})
	GetRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID)
	// Update role
	// (PUT /v1/roles/{role_id})
	UpdateRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID)
	// List permissions for role mapping
	// (GET /v1/roles/{role_id}/permissions)
	ListPermissionsForRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID)
	// Add permission to role
	// (POST /v1/roles/{role_id}/permissions)
	AddPermissionToRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID)
	// Remove permission from role
	// (DELETE /v1/roles/{role_id}/permissions/{permission_id})
	RemovePermissionFromRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID, permissionId openapi_types.UUID)
	// List all tasks
	// (GET /v1/tasks)
	ListTasks(w http.ResponseWriter, r *http.Request, params ListTasksParams)
	// Create a new task
	// (POST /v1/tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)
	// Delete a task
	// (DELETE /v1/tasks/{task_id})
	DeleteTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Get task by ID
	// (GET /v1/tasks/{task_id})
	GetTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Update an existing task
	// (PUT /v1/tasks/{task_id})
	UpdateTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Execute a task
	// (POST /v1/tasks/{task_id}/execute)
	ExecuteTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Get all task runs for a task
	// (GET /v1/tasks/{task_id}/runs)
	ListTaskRuns(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID)
	// Get task run by ID
	// (GET /v1/tasks/{task_run_id}/status)
	GetTaskRun(w http.ResponseWriter, r *http.Request, taskRunId openapi_types.UUID)
	// List all threads
	// (GET /v1/threads)
	ListThreads(w http.ResponseWriter, r *http.Request)
	// Create a new thread
	// (POST /v1/threads)
	CreateThread(w http.ResponseWriter, r *http.Request)
	// Delete thread
	// (DELETE /v1/threads/{thread_id})
	DeleteThread(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID)
	// Get thread by ID
	// (GET /v1/threads/{thread_id})
	GetThread(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID)
	// Update thread title
	// (PUT /v1/threads/{thread_id})
	UpdateThreadTitle(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID)
	// List all messages in a thread
	// (GET /v1/threads/{thread_id}/messages)
	ListMessages(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID)
	// Create a new message in a thread
	// (POST /v1/threads/{thread_id}/messages)
	CreateMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID)
	// Delete message
	// (DELETE /v1/threads/{thread_id}/messages/{message_id})
	DeleteMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID)
	// Get message by ID
	// (GET /v1/threads/{thread_id}/messages/{message_id})
	GetMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID)
	// Update message
	// (PUT /v1/threads/{thread_id}/messages/{message_id})
	UpdateMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID)
	// List all tools
	// (GET /v1/tools)
	ListTools(w http.ResponseWriter, r *http.Request)
	// Create a new tool
	// (POST /v1/tools)
	CreateTool(w http.ResponseWriter, r *http.Request)
	// Delete a tool
	// (DELETE /v1/tools/{tool_id})
	DeleteTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Get a tool by ID
	// (GET /v1/tools/{tool_id})
	GetToolById(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// Update a tool
	// (PUT /v1/tools/{tool_id})
	UpdateTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID)
	// List all users
	// (GET /v1/users)
	ListUsers(w http.ResponseWriter, r *http.Request)
	// Create a new user
	// (POST /v1/users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /v1/users/{user_id})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get user by ID
	// (GET /v1/users/{user_id})
	GetUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Update user
	// (PUT /v1/users/{user_id})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// List role for user mapping
	// (GET /v1/users/{user_id}/roles)
	ListRoleForUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Add role to user
	// (POST /v1/users/{user_id}/roles)
	AddRoleToUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Remove role from user
	// (DELETE /v1/users/{user_id}/roles/{role_id})
	RemoveRoleFromUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, roleId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all agents
// (GET /v1/agents)
func (_ Unimplemented) ListAgents(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new agent
// (POST /v1/agents)
func (_ Unimplemented) CreateAgent(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete agent
// (DELETE /v1/agents/{agent_id})
func (_ Unimplemented) DeleteAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get agent by ID
// (GET /v1/agents/{agent_id})
func (_ Unimplemented) GetAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update agent
// (PUT /v1/agents/{agent_id})
func (_ Unimplemented) UpdateAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List permissions for agent mapping
// (GET /v1/agents/{agent_id}/permissions)
func (_ Unimplemented) ListPermissionsForAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add permission to agent
// (POST /v1/agents/{agent_id}/permissions)
func (_ Unimplemented) AddPermissionToAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove permission from agent
// (DELETE /v1/agents/{agent_id}/permissions/{permission_id})
func (_ Unimplemented) RemovePermissionFromAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, permissionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all flows
// (GET /v1/flows)
func (_ Unimplemented) ListFlows(w http.ResponseWriter, r *http.Request, params ListFlowsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new flow
// (POST /v1/flows)
func (_ Unimplemented) CreateFlow(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a flow
// (DELETE /v1/flows/{flow_id})
func (_ Unimplemented) DeleteFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get flow by ID
// (GET /v1/flows/{flow_id})
func (_ Unimplemented) GetFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing flow
// (PUT /v1/flows/{flow_id})
func (_ Unimplemented) UpdateFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Execute a flow
// (POST /v1/flows/{flow_id}/execute)
func (_ Unimplemented) ExecuteFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get flow run by ID
// (GET /v1/flows/{flow_run_id}/status)
func (_ Unimplemented) GetFlowRun(w http.ResponseWriter, r *http.Request, flowRunId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Mock standalone server
// (POST /v1/mock/tool)
func (_ Unimplemented) MockStandaloneTool(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Mock standalone server with delay
// (POST /v1/mock/tool_with_delay)
func (_ Unimplemented) MockStandaloneToolWithDelay(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all permissions
// (GET /v1/permissions)
func (_ Unimplemented) ListPermissions(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new permission
// (POST /v1/permissions)
func (_ Unimplemented) CreatePermission(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete permission
// (DELETE /v1/permissions/{permission_id})
func (_ Unimplemented) DeletePermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get permission by ID
// (GET /v1/permissions/{permission_id})
func (_ Unimplemented) GetPermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update permission
// (PUT /v1/permissions/{permission_id})
func (_ Unimplemented) UpdatePermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all roles
// (GET /v1/roles)
func (_ Unimplemented) ListRoles(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new role
// (POST /v1/roles)
func (_ Unimplemented) CreateRole(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete role
// (DELETE /v1/roles/{role_id})
func (_ Unimplemented) DeleteRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get role by ID
// (GET /v1/roles/{role_id})
func (_ Unimplemented) GetRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update role
// (PUT /v1/roles/{role_id})
func (_ Unimplemented) UpdateRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List permissions for role mapping
// (GET /v1/roles/{role_id}/permissions)
func (_ Unimplemented) ListPermissionsForRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add permission to role
// (POST /v1/roles/{role_id}/permissions)
func (_ Unimplemented) AddPermissionToRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove permission from role
// (DELETE /v1/roles/{role_id}/permissions/{permission_id})
func (_ Unimplemented) RemovePermissionFromRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID, permissionId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tasks
// (GET /v1/tasks)
func (_ Unimplemented) ListTasks(w http.ResponseWriter, r *http.Request, params ListTasksParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new task
// (POST /v1/tasks)
func (_ Unimplemented) CreateTask(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a task
// (DELETE /v1/tasks/{task_id})
func (_ Unimplemented) DeleteTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task by ID
// (GET /v1/tasks/{task_id})
func (_ Unimplemented) GetTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update an existing task
// (PUT /v1/tasks/{task_id})
func (_ Unimplemented) UpdateTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Execute a task
// (POST /v1/tasks/{task_id}/execute)
func (_ Unimplemented) ExecuteTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all task runs for a task
// (GET /v1/tasks/{task_id}/runs)
func (_ Unimplemented) ListTaskRuns(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get task run by ID
// (GET /v1/tasks/{task_run_id}/status)
func (_ Unimplemented) GetTaskRun(w http.ResponseWriter, r *http.Request, taskRunId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all threads
// (GET /v1/threads)
func (_ Unimplemented) ListThreads(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new thread
// (POST /v1/threads)
func (_ Unimplemented) CreateThread(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete thread
// (DELETE /v1/threads/{thread_id})
func (_ Unimplemented) DeleteThread(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get thread by ID
// (GET /v1/threads/{thread_id})
func (_ Unimplemented) GetThread(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update thread title
// (PUT /v1/threads/{thread_id})
func (_ Unimplemented) UpdateThreadTitle(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all messages in a thread
// (GET /v1/threads/{thread_id}/messages)
func (_ Unimplemented) ListMessages(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new message in a thread
// (POST /v1/threads/{thread_id}/messages)
func (_ Unimplemented) CreateMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete message
// (DELETE /v1/threads/{thread_id}/messages/{message_id})
func (_ Unimplemented) DeleteMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get message by ID
// (GET /v1/threads/{thread_id}/messages/{message_id})
func (_ Unimplemented) GetMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update message
// (PUT /v1/threads/{thread_id}/messages/{message_id})
func (_ Unimplemented) UpdateMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all tools
// (GET /v1/tools)
func (_ Unimplemented) ListTools(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new tool
// (POST /v1/tools)
func (_ Unimplemented) CreateTool(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a tool
// (DELETE /v1/tools/{tool_id})
func (_ Unimplemented) DeleteTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a tool by ID
// (GET /v1/tools/{tool_id})
func (_ Unimplemented) GetToolById(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a tool
// (PUT /v1/tools/{tool_id})
func (_ Unimplemented) UpdateTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all users
// (GET /v1/users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /v1/users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /v1/users/{user_id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /v1/users/{user_id})
func (_ Unimplemented) GetUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /v1/users/{user_id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List role for user mapping
// (GET /v1/users/{user_id}/roles)
func (_ Unimplemented) ListRoleForUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add role to user
// (POST /v1/users/{user_id}/roles)
func (_ Unimplemented) AddRoleToUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove role from user
// (DELETE /v1/users/{user_id}/roles/{role_id})
func (_ Unimplemented) RemoveRoleFromUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, roleId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListAgents operation middleware
func (siw *ServerInterfaceWrapper) ListAgents(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAgents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateAgent operation middleware
func (siw *ServerInterfaceWrapper) CreateAgent(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAgent(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAgent operation middleware
func (siw *ServerInterfaceWrapper) DeleteAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agent_id" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agent_id", chi.URLParam(r, "agent_id"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agent_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAgent(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAgent operation middleware
func (siw *ServerInterfaceWrapper) GetAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agent_id" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agent_id", chi.URLParam(r, "agent_id"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agent_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAgent(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateAgent operation middleware
func (siw *ServerInterfaceWrapper) UpdateAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agent_id" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agent_id", chi.URLParam(r, "agent_id"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agent_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateAgent(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPermissionsForAgent operation middleware
func (siw *ServerInterfaceWrapper) ListPermissionsForAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agent_id" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agent_id", chi.URLParam(r, "agent_id"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agent_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPermissionsForAgent(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddPermissionToAgent operation middleware
func (siw *ServerInterfaceWrapper) AddPermissionToAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agent_id" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agent_id", chi.URLParam(r, "agent_id"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agent_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPermissionToAgent(w, r, agentId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemovePermissionFromAgent operation middleware
func (siw *ServerInterfaceWrapper) RemovePermissionFromAgent(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "agent_id" -------------
	var agentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "agent_id", chi.URLParam(r, "agent_id"), &agentId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "agent_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemovePermissionFromAgent(w, r, agentId, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListFlows operation middleware
func (siw *ServerInterfaceWrapper) ListFlows(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFlowsParams

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "per_page", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFlows(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateFlow operation middleware
func (siw *ServerInterfaceWrapper) CreateFlow(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFlow(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteFlow operation middleware
func (siw *ServerInterfaceWrapper) DeleteFlow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flow_id" -------------
	var flowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "flow_id", chi.URLParam(r, "flow_id"), &flowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flow_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFlow(w, r, flowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlow operation middleware
func (siw *ServerInterfaceWrapper) GetFlow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flow_id" -------------
	var flowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "flow_id", chi.URLParam(r, "flow_id"), &flowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flow_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlow(w, r, flowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateFlow operation middleware
func (siw *ServerInterfaceWrapper) UpdateFlow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flow_id" -------------
	var flowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "flow_id", chi.URLParam(r, "flow_id"), &flowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flow_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateFlow(w, r, flowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteFlow operation middleware
func (siw *ServerInterfaceWrapper) ExecuteFlow(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flow_id" -------------
	var flowId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "flow_id", chi.URLParam(r, "flow_id"), &flowId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flow_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteFlow(w, r, flowId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetFlowRun operation middleware
func (siw *ServerInterfaceWrapper) GetFlowRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "flow_run_id" -------------
	var flowRunId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "flow_run_id", chi.URLParam(r, "flow_run_id"), &flowRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "flow_run_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetFlowRun(w, r, flowRunId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MockStandaloneTool operation middleware
func (siw *ServerInterfaceWrapper) MockStandaloneTool(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MockStandaloneTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MockStandaloneToolWithDelay operation middleware
func (siw *ServerInterfaceWrapper) MockStandaloneToolWithDelay(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MockStandaloneToolWithDelay(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPermissions operation middleware
func (siw *ServerInterfaceWrapper) ListPermissions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPermissions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePermission operation middleware
func (siw *ServerInterfaceWrapper) CreatePermission(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePermission(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePermission operation middleware
func (siw *ServerInterfaceWrapper) DeletePermission(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePermission(w, r, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPermission operation middleware
func (siw *ServerInterfaceWrapper) GetPermission(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPermission(w, r, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePermission operation middleware
func (siw *ServerInterfaceWrapper) UpdatePermission(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "permission_id" -------------
	var permissionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePermission(w, r, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRoles operation middleware
func (siw *ServerInterfaceWrapper) ListRoles(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRoles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateRole operation middleware
func (siw *ServerInterfaceWrapper) CreateRole(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRole(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteRole operation middleware
func (siw *ServerInterfaceWrapper) DeleteRole(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRole(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetRole operation middleware
func (siw *ServerInterfaceWrapper) GetRole(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRole(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateRole operation middleware
func (siw *ServerInterfaceWrapper) UpdateRole(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateRole(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListPermissionsForRole operation middleware
func (siw *ServerInterfaceWrapper) ListPermissionsForRole(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPermissionsForRole(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddPermissionToRole operation middleware
func (siw *ServerInterfaceWrapper) AddPermissionToRole(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPermissionToRole(w, r, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemovePermissionFromRole operation middleware
func (siw *ServerInterfaceWrapper) RemovePermissionFromRole(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "role_id" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	// ------------- Path parameter "permission_id" -------------
	var permissionId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "permission_id", chi.URLParam(r, "permission_id"), &permissionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permission_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemovePermissionFromRole(w, r, roleId, permissionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTasksParams

	// ------------- Optional query parameter "per_page" -------------

	err = runtime.BindQueryParameter("form", true, false, "per_page", r.URL.Query(), &params.PerPage)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "per_page", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTasks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "task_id" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "task_id" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "task_id" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ExecuteTask operation middleware
func (siw *ServerInterfaceWrapper) ExecuteTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "task_id" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ExecuteTask(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTaskRuns operation middleware
func (siw *ServerInterfaceWrapper) ListTaskRuns(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "task_id" -------------
	var taskId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "task_id", chi.URLParam(r, "task_id"), &taskId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTaskRuns(w, r, taskId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetTaskRun operation middleware
func (siw *ServerInterfaceWrapper) GetTaskRun(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "task_run_id" -------------
	var taskRunId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "task_run_id", chi.URLParam(r, "task_run_id"), &taskRunId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "task_run_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTaskRun(w, r, taskRunId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListThreads operation middleware
func (siw *ServerInterfaceWrapper) ListThreads(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListThreads(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateThread operation middleware
func (siw *ServerInterfaceWrapper) CreateThread(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateThread(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteThread operation middleware
func (siw *ServerInterfaceWrapper) DeleteThread(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetThread operation middleware
func (siw *ServerInterfaceWrapper) GetThread(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetThread(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateThreadTitle operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreadTitle(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateThreadTitle(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, threadId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteMessage operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", chi.URLParam(r, "message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", chi.URLParam(r, "message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateMessage operation middleware
func (siw *ServerInterfaceWrapper) UpdateMessage(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "thread_id" -------------
	var threadId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "thread_id", chi.URLParam(r, "thread_id"), &threadId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "thread_id", Err: err})
		return
	}

	// ------------- Path parameter "message_id" -------------
	var messageId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", chi.URLParam(r, "message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "message_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateMessage(w, r, threadId, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListTools operation middleware
func (siw *ServerInterfaceWrapper) ListTools(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTools(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateTool operation middleware
func (siw *ServerInterfaceWrapper) CreateTool(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTool(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTool operation middleware
func (siw *ServerInterfaceWrapper) DeleteTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tool_id" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tool_id", chi.URLParam(r, "tool_id"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTool(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetToolById operation middleware
func (siw *ServerInterfaceWrapper) GetToolById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tool_id" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tool_id", chi.URLParam(r, "tool_id"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetToolById(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTool operation middleware
func (siw *ServerInterfaceWrapper) UpdateTool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "tool_id" -------------
	var toolId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tool_id", chi.URLParam(r, "tool_id"), &toolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tool_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTool(w, r, toolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListRoleForUser operation middleware
func (siw *ServerInterfaceWrapper) ListRoleForUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRoleForUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// AddRoleToUser operation middleware
func (siw *ServerInterfaceWrapper) AddRoleToUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddRoleToUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveRoleFromUser operation middleware
func (siw *ServerInterfaceWrapper) RemoveRoleFromUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", chi.URLParam(r, "user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user_id", Err: err})
		return
	}

	// ------------- Path parameter "role_id" -------------
	var roleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "role_id", chi.URLParam(r, "role_id"), &roleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveRoleFromUser(w, r, userId, roleId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/agents", wrapper.ListAgents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/agents", wrapper.CreateAgent)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/agents/{agent_id}", wrapper.DeleteAgent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/agents/{agent_id}", wrapper.GetAgent)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/agents/{agent_id}", wrapper.UpdateAgent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/agents/{agent_id}/permissions", wrapper.ListPermissionsForAgent)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/agents/{agent_id}/permissions", wrapper.AddPermissionToAgent)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/agents/{agent_id}/permissions/{permission_id}", wrapper.RemovePermissionFromAgent)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flows", wrapper.ListFlows)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/flows", wrapper.CreateFlow)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/flows/{flow_id}", wrapper.DeleteFlow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flows/{flow_id}", wrapper.GetFlow)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/flows/{flow_id}", wrapper.UpdateFlow)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/flows/{flow_id}/execute", wrapper.ExecuteFlow)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/flows/{flow_run_id}/status", wrapper.GetFlowRun)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/mock/tool", wrapper.MockStandaloneTool)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/mock/tool_with_delay", wrapper.MockStandaloneToolWithDelay)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions", wrapper.ListPermissions)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/permissions", wrapper.CreatePermission)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/permissions/{permission_id}", wrapper.DeletePermission)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/permissions/{permission_id}", wrapper.GetPermission)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/permissions/{permission_id}", wrapper.UpdatePermission)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/roles", wrapper.ListRoles)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/roles", wrapper.CreateRole)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/roles/{role_id}", wrapper.DeleteRole)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/roles/{role_id}", wrapper.GetRole)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/roles/{role_id}", wrapper.UpdateRole)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/roles/{role_id}/permissions", wrapper.ListPermissionsForRole)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/roles/{role_id}/permissions", wrapper.AddPermissionToRole)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/roles/{role_id}/permissions/{permission_id}", wrapper.RemovePermissionFromRole)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks", wrapper.ListTasks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks", wrapper.CreateTask)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tasks/{task_id}", wrapper.DeleteTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{task_id}", wrapper.GetTask)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/tasks/{task_id}", wrapper.UpdateTask)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tasks/{task_id}/execute", wrapper.ExecuteTask)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{task_id}/runs", wrapper.ListTaskRuns)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tasks/{task_run_id}/status", wrapper.GetTaskRun)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/threads", wrapper.ListThreads)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/threads", wrapper.CreateThread)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/threads/{thread_id}", wrapper.DeleteThread)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/threads/{thread_id}", wrapper.GetThread)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/threads/{thread_id}", wrapper.UpdateThreadTitle)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/threads/{thread_id}/messages", wrapper.ListMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/threads/{thread_id}/messages", wrapper.CreateMessage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/threads/{thread_id}/messages/{message_id}", wrapper.DeleteMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/threads/{thread_id}/messages/{message_id}", wrapper.GetMessage)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/threads/{thread_id}/messages/{message_id}", wrapper.UpdateMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tools", wrapper.ListTools)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/tools", wrapper.CreateTool)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/tools/{tool_id}", wrapper.DeleteTool)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/tools/{tool_id}", wrapper.GetToolById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/tools/{tool_id}", wrapper.UpdateTool)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/users/{user_id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users/{user_id}", wrapper.GetUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/v1/users/{user_id}", wrapper.UpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/users/{user_id}/roles", wrapper.ListRoleForUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/users/{user_id}/roles", wrapper.AddRoleToUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/v1/users/{user_id}/roles/{role_id}", wrapper.RemoveRoleFromUser)
	})

	return r
}

type ListAgentsRequestObject struct {
}

type ListAgentsResponseObject interface {
	VisitListAgentsResponse(w http.ResponseWriter) error
}

type ListAgents200JSONResponse AgentList

func (response ListAgents200JSONResponse) VisitListAgentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgentRequestObject struct {
	Body *CreateAgentJSONRequestBody
}

type CreateAgentResponseObject interface {
	VisitCreateAgentResponse(w http.ResponseWriter) error
}

type CreateAgent201JSONResponse Agent

func (response CreateAgent201JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAgent400JSONResponse BadRequest

func (response CreateAgent400JSONResponse) VisitCreateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAgentRequestObject struct {
	AgentId openapi_types.UUID `json:"agent_id"`
}

type DeleteAgentResponseObject interface {
	VisitDeleteAgentResponse(w http.ResponseWriter) error
}

type DeleteAgent204Response struct {
}

func (response DeleteAgent204Response) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAgent404JSONResponse NotFound

func (response DeleteAgent404JSONResponse) VisitDeleteAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAgentRequestObject struct {
	AgentId openapi_types.UUID `json:"agent_id"`
}

type GetAgentResponseObject interface {
	VisitGetAgentResponse(w http.ResponseWriter) error
}

type GetAgent200JSONResponse Agent

func (response GetAgent200JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAgent404JSONResponse NotFound

func (response GetAgent404JSONResponse) VisitGetAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgentRequestObject struct {
	AgentId openapi_types.UUID `json:"agent_id"`
	Body    *UpdateAgentJSONRequestBody
}

type UpdateAgentResponseObject interface {
	VisitUpdateAgentResponse(w http.ResponseWriter) error
}

type UpdateAgent200JSONResponse Agent

func (response UpdateAgent200JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent400JSONResponse BadRequest

func (response UpdateAgent400JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAgent404JSONResponse NotFound

func (response UpdateAgent404JSONResponse) VisitUpdateAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPermissionsForAgentRequestObject struct {
	AgentId openapi_types.UUID `json:"agent_id"`
}

type ListPermissionsForAgentResponseObject interface {
	VisitListPermissionsForAgentResponse(w http.ResponseWriter) error
}

type ListPermissionsForAgent200JSONResponse AgentPermissionMappingList

func (response ListPermissionsForAgent200JSONResponse) VisitListPermissionsForAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPermissionsForAgent404JSONResponse NotFound

func (response ListPermissionsForAgent404JSONResponse) VisitListPermissionsForAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToAgentRequestObject struct {
	AgentId openapi_types.UUID `json:"agent_id"`
	Body    *AddPermissionToAgentJSONRequestBody
}

type AddPermissionToAgentResponseObject interface {
	VisitAddPermissionToAgentResponse(w http.ResponseWriter) error
}

type AddPermissionToAgent201JSONResponse AgentPermissionMapping

func (response AddPermissionToAgent201JSONResponse) VisitAddPermissionToAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToAgent400JSONResponse BadRequest

func (response AddPermissionToAgent400JSONResponse) VisitAddPermissionToAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToAgent404JSONResponse NotFound

func (response AddPermissionToAgent404JSONResponse) VisitAddPermissionToAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToAgent409JSONResponse ResourceAlreadyExists

func (response AddPermissionToAgent409JSONResponse) VisitAddPermissionToAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemovePermissionFromAgentRequestObject struct {
	AgentId      openapi_types.UUID `json:"agent_id"`
	PermissionId openapi_types.UUID `json:"permission_id"`
}

type RemovePermissionFromAgentResponseObject interface {
	VisitRemovePermissionFromAgentResponse(w http.ResponseWriter) error
}

type RemovePermissionFromAgent204Response struct {
}

func (response RemovePermissionFromAgent204Response) VisitRemovePermissionFromAgentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemovePermissionFromAgent404JSONResponse NotFound

func (response RemovePermissionFromAgent404JSONResponse) VisitRemovePermissionFromAgentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListFlowsRequestObject struct {
	Params ListFlowsParams
}

type ListFlowsResponseObject interface {
	VisitListFlowsResponse(w http.ResponseWriter) error
}

type ListFlows200JSONResponse FlowList

func (response ListFlows200JSONResponse) VisitListFlowsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlowRequestObject struct {
	Body *CreateFlowJSONRequestBody
}

type CreateFlowResponseObject interface {
	VisitCreateFlowResponse(w http.ResponseWriter) error
}

type CreateFlow201JSONResponse Flow

func (response CreateFlow201JSONResponse) VisitCreateFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFlow400JSONResponse NotFound

func (response CreateFlow400JSONResponse) VisitCreateFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFlowRequestObject struct {
	FlowId openapi_types.UUID `json:"flow_id"`
}

type DeleteFlowResponseObject interface {
	VisitDeleteFlowResponse(w http.ResponseWriter) error
}

type DeleteFlow204Response struct {
}

func (response DeleteFlow204Response) VisitDeleteFlowResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteFlow404JSONResponse NotFound

func (response DeleteFlow404JSONResponse) VisitDeleteFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFlowRequestObject struct {
	FlowId openapi_types.UUID `json:"flow_id"`
}

type GetFlowResponseObject interface {
	VisitGetFlowResponse(w http.ResponseWriter) error
}

type GetFlow200JSONResponse Flow

func (response GetFlow200JSONResponse) VisitGetFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlow404JSONResponse NotFound

func (response GetFlow404JSONResponse) VisitGetFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlowRequestObject struct {
	FlowId openapi_types.UUID `json:"flow_id"`
	Body   *UpdateFlowJSONRequestBody
}

type UpdateFlowResponseObject interface {
	VisitUpdateFlowResponse(w http.ResponseWriter) error
}

type UpdateFlow200JSONResponse Flow

func (response UpdateFlow200JSONResponse) VisitUpdateFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateFlow404JSONResponse NotFound

func (response UpdateFlow404JSONResponse) VisitUpdateFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteFlowRequestObject struct {
	FlowId openapi_types.UUID `json:"flow_id"`
	Body   *ExecuteFlowJSONRequestBody
}

type ExecuteFlowResponseObject interface {
	VisitExecuteFlowResponse(w http.ResponseWriter) error
}

type ExecuteFlow200JSONResponse FlowRun

func (response ExecuteFlow200JSONResponse) VisitExecuteFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteFlow404JSONResponse NotFound

func (response ExecuteFlow404JSONResponse) VisitExecuteFlowResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetFlowRunRequestObject struct {
	FlowRunId openapi_types.UUID `json:"flow_run_id"`
}

type GetFlowRunResponseObject interface {
	VisitGetFlowRunResponse(w http.ResponseWriter) error
}

type GetFlowRun200JSONResponse FlowRun

func (response GetFlowRun200JSONResponse) VisitGetFlowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFlowRun404JSONResponse NotFound

func (response GetFlowRun404JSONResponse) VisitGetFlowRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MockStandaloneToolRequestObject struct {
	Body *MockStandaloneToolJSONRequestBody
}

type MockStandaloneToolResponseObject interface {
	VisitMockStandaloneToolResponse(w http.ResponseWriter) error
}

type MockStandaloneTool200JSONResponse MockToolResponse

func (response MockStandaloneTool200JSONResponse) VisitMockStandaloneToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MockStandaloneTool400JSONResponse BadRequest

func (response MockStandaloneTool400JSONResponse) VisitMockStandaloneToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type MockStandaloneToolWithDelayRequestObject struct {
	Body *MockStandaloneToolWithDelayJSONRequestBody
}

type MockStandaloneToolWithDelayResponseObject interface {
	VisitMockStandaloneToolWithDelayResponse(w http.ResponseWriter) error
}

type MockStandaloneToolWithDelay200JSONResponse MockToolWithDelayResponse

func (response MockStandaloneToolWithDelay200JSONResponse) VisitMockStandaloneToolWithDelayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MockStandaloneToolWithDelay400JSONResponse BadRequest

func (response MockStandaloneToolWithDelay400JSONResponse) VisitMockStandaloneToolWithDelayResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPermissionsRequestObject struct {
}

type ListPermissionsResponseObject interface {
	VisitListPermissionsResponse(w http.ResponseWriter) error
}

type ListPermissions200JSONResponse PermissionList

func (response ListPermissions200JSONResponse) VisitListPermissionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermissionRequestObject struct {
	Body *CreatePermissionJSONRequestBody
}

type CreatePermissionResponseObject interface {
	VisitCreatePermissionResponse(w http.ResponseWriter) error
}

type CreatePermission201JSONResponse Permission

func (response CreatePermission201JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePermission400JSONResponse BadRequest

func (response CreatePermission400JSONResponse) VisitCreatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePermissionRequestObject struct {
	PermissionId openapi_types.UUID `json:"permission_id"`
}

type DeletePermissionResponseObject interface {
	VisitDeletePermissionResponse(w http.ResponseWriter) error
}

type DeletePermission204Response struct {
}

func (response DeletePermission204Response) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeletePermission404JSONResponse NotFound

func (response DeletePermission404JSONResponse) VisitDeletePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPermissionRequestObject struct {
	PermissionId openapi_types.UUID `json:"permission_id"`
}

type GetPermissionResponseObject interface {
	VisitGetPermissionResponse(w http.ResponseWriter) error
}

type GetPermission200JSONResponse Permission

func (response GetPermission200JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPermission404JSONResponse NotFound

func (response GetPermission404JSONResponse) VisitGetPermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermissionRequestObject struct {
	PermissionId openapi_types.UUID `json:"permission_id"`
	Body         *UpdatePermissionJSONRequestBody
}

type UpdatePermissionResponseObject interface {
	VisitUpdatePermissionResponse(w http.ResponseWriter) error
}

type UpdatePermission200JSONResponse Permission

func (response UpdatePermission200JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission400JSONResponse BadRequest

func (response UpdatePermission400JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePermission404JSONResponse NotFound

func (response UpdatePermission404JSONResponse) VisitUpdatePermissionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListRolesRequestObject struct {
}

type ListRolesResponseObject interface {
	VisitListRolesResponse(w http.ResponseWriter) error
}

type ListRoles200JSONResponse RoleList

func (response ListRoles200JSONResponse) VisitListRolesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRoleRequestObject struct {
	Body *CreateRoleJSONRequestBody
}

type CreateRoleResponseObject interface {
	VisitCreateRoleResponse(w http.ResponseWriter) error
}

type CreateRole201JSONResponse Role

func (response CreateRole201JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRole400JSONResponse BadRequest

func (response CreateRole400JSONResponse) VisitCreateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRoleRequestObject struct {
	RoleId openapi_types.UUID `json:"role_id"`
}

type DeleteRoleResponseObject interface {
	VisitDeleteRoleResponse(w http.ResponseWriter) error
}

type DeleteRole204Response struct {
}

func (response DeleteRole204Response) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRole404JSONResponse NotFound

func (response DeleteRole404JSONResponse) VisitDeleteRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRoleRequestObject struct {
	RoleId openapi_types.UUID `json:"role_id"`
}

type GetRoleResponseObject interface {
	VisitGetRoleResponse(w http.ResponseWriter) error
}

type GetRole200JSONResponse Role

func (response GetRole200JSONResponse) VisitGetRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRole404JSONResponse NotFound

func (response GetRole404JSONResponse) VisitGetRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRoleRequestObject struct {
	RoleId openapi_types.UUID `json:"role_id"`
	Body   *UpdateRoleJSONRequestBody
}

type UpdateRoleResponseObject interface {
	VisitUpdateRoleResponse(w http.ResponseWriter) error
}

type UpdateRole200JSONResponse Role

func (response UpdateRole200JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole400JSONResponse BadRequest

func (response UpdateRole400JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRole404JSONResponse NotFound

func (response UpdateRole404JSONResponse) VisitUpdateRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListPermissionsForRoleRequestObject struct {
	RoleId openapi_types.UUID `json:"role_id"`
}

type ListPermissionsForRoleResponseObject interface {
	VisitListPermissionsForRoleResponse(w http.ResponseWriter) error
}

type ListPermissionsForRole200JSONResponse RolePermissionMappingList

func (response ListPermissionsForRole200JSONResponse) VisitListPermissionsForRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPermissionsForRole404JSONResponse NotFound

func (response ListPermissionsForRole404JSONResponse) VisitListPermissionsForRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToRoleRequestObject struct {
	RoleId openapi_types.UUID `json:"role_id"`
	Body   *AddPermissionToRoleJSONRequestBody
}

type AddPermissionToRoleResponseObject interface {
	VisitAddPermissionToRoleResponse(w http.ResponseWriter) error
}

type AddPermissionToRole201JSONResponse RolePermissionMapping

func (response AddPermissionToRole201JSONResponse) VisitAddPermissionToRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToRole400JSONResponse BadRequest

func (response AddPermissionToRole400JSONResponse) VisitAddPermissionToRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToRole404JSONResponse NotFound

func (response AddPermissionToRole404JSONResponse) VisitAddPermissionToRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddPermissionToRole409JSONResponse ResourceAlreadyExists

func (response AddPermissionToRole409JSONResponse) VisitAddPermissionToRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemovePermissionFromRoleRequestObject struct {
	RoleId       openapi_types.UUID `json:"role_id"`
	PermissionId openapi_types.UUID `json:"permission_id"`
}

type RemovePermissionFromRoleResponseObject interface {
	VisitRemovePermissionFromRoleResponse(w http.ResponseWriter) error
}

type RemovePermissionFromRole204Response struct {
}

func (response RemovePermissionFromRole204Response) VisitRemovePermissionFromRoleResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemovePermissionFromRole404JSONResponse NotFound

func (response RemovePermissionFromRole404JSONResponse) VisitRemovePermissionFromRoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTasksRequestObject struct {
	Params ListTasksParams
}

type ListTasksResponseObject interface {
	VisitListTasksResponse(w http.ResponseWriter) error
}

type ListTasks200JSONResponse TaskList

func (response ListTasks200JSONResponse) VisitListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTaskRequestObject struct {
	Body *CreateTaskJSONRequestBody
}

type CreateTaskResponseObject interface {
	VisitCreateTaskResponse(w http.ResponseWriter) error
}

type CreateTask201JSONResponse Task

func (response CreateTask201JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTask400JSONResponse BadRequest

func (response CreateTask400JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTask404JSONResponse NotFound

func (response CreateTask404JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTaskRequestObject struct {
	TaskId openapi_types.UUID `json:"task_id"`
}

type DeleteTaskResponseObject interface {
	VisitDeleteTaskResponse(w http.ResponseWriter) error
}

type DeleteTask204Response struct {
}

func (response DeleteTask204Response) VisitDeleteTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTask404JSONResponse NotFound

func (response DeleteTask404JSONResponse) VisitDeleteTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskRequestObject struct {
	TaskId openapi_types.UUID `json:"task_id"`
}

type GetTaskResponseObject interface {
	VisitGetTaskResponse(w http.ResponseWriter) error
}

type GetTask200JSONResponse Task

func (response GetTask200JSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTask404JSONResponse NotFound

func (response GetTask404JSONResponse) VisitGetTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTaskRequestObject struct {
	TaskId openapi_types.UUID `json:"task_id"`
	Body   *UpdateTaskJSONRequestBody
}

type UpdateTaskResponseObject interface {
	VisitUpdateTaskResponse(w http.ResponseWriter) error
}

type UpdateTask200JSONResponse Task

func (response UpdateTask200JSONResponse) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTask404JSONResponse NotFound

func (response UpdateTask404JSONResponse) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteTaskRequestObject struct {
	TaskId openapi_types.UUID `json:"task_id"`
	Body   *ExecuteTaskJSONRequestBody
}

type ExecuteTaskResponseObject interface {
	VisitExecuteTaskResponse(w http.ResponseWriter) error
}

type ExecuteTask200ResponseHeaders struct {
	CacheControl string
	Connection   string
}

type ExecuteTask200JSONResponse struct {
	Body    TaskRun
	Headers ExecuteTask200ResponseHeaders
}

func (response ExecuteTask200JSONResponse) VisitExecuteTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExecuteTask200TexteventStreamResponse struct {
	Body          io.Reader
	Headers       ExecuteTask200ResponseHeaders
	ContentLength int64
}

func (response ExecuteTask200TexteventStreamResponse) VisitExecuteTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/event-stream")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.Header().Set("Cache-Control", fmt.Sprint(response.Headers.CacheControl))
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ExecuteTask400JSONResponse BadRequest

func (response ExecuteTask400JSONResponse) VisitExecuteTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExecuteTask404JSONResponse NotFound

func (response ExecuteTask404JSONResponse) VisitExecuteTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListTaskRunsRequestObject struct {
	TaskId openapi_types.UUID `json:"task_id"`
}

type ListTaskRunsResponseObject interface {
	VisitListTaskRunsResponse(w http.ResponseWriter) error
}

type ListTaskRuns200JSONResponse []TaskRun

func (response ListTaskRuns200JSONResponse) VisitListTaskRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTaskRuns404JSONResponse NotFound

func (response ListTaskRuns404JSONResponse) VisitListTaskRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskRunRequestObject struct {
	TaskRunId openapi_types.UUID `json:"task_run_id"`
}

type GetTaskRunResponseObject interface {
	VisitGetTaskRunResponse(w http.ResponseWriter) error
}

type GetTaskRun200JSONResponse TaskRun

func (response GetTaskRun200JSONResponse) VisitGetTaskRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskRun404JSONResponse NotFound

func (response GetTaskRun404JSONResponse) VisitGetTaskRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListThreadsRequestObject struct {
}

type ListThreadsResponseObject interface {
	VisitListThreadsResponse(w http.ResponseWriter) error
}

type ListThreads200JSONResponse ThreadList

func (response ListThreads200JSONResponse) VisitListThreadsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateThreadRequestObject struct {
	Body *CreateThreadJSONRequestBody
}

type CreateThreadResponseObject interface {
	VisitCreateThreadResponse(w http.ResponseWriter) error
}

type CreateThread201JSONResponse Thread

func (response CreateThread201JSONResponse) VisitCreateThreadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateThread400JSONResponse BadRequest

func (response CreateThread400JSONResponse) VisitCreateThreadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteThreadRequestObject struct {
	ThreadId openapi_types.UUID `json:"thread_id"`
}

type DeleteThreadResponseObject interface {
	VisitDeleteThreadResponse(w http.ResponseWriter) error
}

type DeleteThread204Response struct {
}

func (response DeleteThread204Response) VisitDeleteThreadResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteThread404JSONResponse NotFound

func (response DeleteThread404JSONResponse) VisitDeleteThreadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetThreadRequestObject struct {
	ThreadId openapi_types.UUID `json:"thread_id"`
}

type GetThreadResponseObject interface {
	VisitGetThreadResponse(w http.ResponseWriter) error
}

type GetThread200JSONResponse Thread

func (response GetThread200JSONResponse) VisitGetThreadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetThread404JSONResponse NotFound

func (response GetThread404JSONResponse) VisitGetThreadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateThreadTitleRequestObject struct {
	ThreadId openapi_types.UUID `json:"thread_id"`
	Body     *UpdateThreadTitleJSONRequestBody
}

type UpdateThreadTitleResponseObject interface {
	VisitUpdateThreadTitleResponse(w http.ResponseWriter) error
}

type UpdateThreadTitle200JSONResponse Thread

func (response UpdateThreadTitle200JSONResponse) VisitUpdateThreadTitleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateThreadTitle400JSONResponse BadRequest

func (response UpdateThreadTitle400JSONResponse) VisitUpdateThreadTitleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateThreadTitle404JSONResponse NotFound

func (response UpdateThreadTitle404JSONResponse) VisitUpdateThreadTitleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListMessagesRequestObject struct {
	ThreadId openapi_types.UUID `json:"thread_id"`
}

type ListMessagesResponseObject interface {
	VisitListMessagesResponse(w http.ResponseWriter) error
}

type ListMessages200JSONResponse MessageList

func (response ListMessages200JSONResponse) VisitListMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMessages404JSONResponse NotFound

func (response ListMessages404JSONResponse) VisitListMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateMessageRequestObject struct {
	ThreadId openapi_types.UUID `json:"thread_id"`
	Body     *CreateMessageJSONRequestBody
}

type CreateMessageResponseObject interface {
	VisitCreateMessageResponse(w http.ResponseWriter) error
}

type CreateMessage201JSONResponse Message

func (response CreateMessage201JSONResponse) VisitCreateMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateMessage400JSONResponse BadRequest

func (response CreateMessage400JSONResponse) VisitCreateMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateMessage404JSONResponse NotFound

func (response CreateMessage404JSONResponse) VisitCreateMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMessageRequestObject struct {
	ThreadId  openapi_types.UUID `json:"thread_id"`
	MessageId openapi_types.UUID `json:"message_id"`
}

type DeleteMessageResponseObject interface {
	VisitDeleteMessageResponse(w http.ResponseWriter) error
}

type DeleteMessage204Response struct {
}

func (response DeleteMessage204Response) VisitDeleteMessageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMessage404JSONResponse NotFound

func (response DeleteMessage404JSONResponse) VisitDeleteMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetMessageRequestObject struct {
	ThreadId  openapi_types.UUID `json:"thread_id"`
	MessageId openapi_types.UUID `json:"message_id"`
}

type GetMessageResponseObject interface {
	VisitGetMessageResponse(w http.ResponseWriter) error
}

type GetMessage200JSONResponse Message

func (response GetMessage200JSONResponse) VisitGetMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMessage404JSONResponse NotFound

func (response GetMessage404JSONResponse) VisitGetMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMessageRequestObject struct {
	ThreadId  openapi_types.UUID `json:"thread_id"`
	MessageId openapi_types.UUID `json:"message_id"`
	Body      *UpdateMessageJSONRequestBody
}

type UpdateMessageResponseObject interface {
	VisitUpdateMessageResponse(w http.ResponseWriter) error
}

type UpdateMessage200JSONResponse Message

func (response UpdateMessage200JSONResponse) VisitUpdateMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMessage400JSONResponse BadRequest

func (response UpdateMessage400JSONResponse) VisitUpdateMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMessage404JSONResponse NotFound

func (response UpdateMessage404JSONResponse) VisitUpdateMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListToolsRequestObject struct {
}

type ListToolsResponseObject interface {
	VisitListToolsResponse(w http.ResponseWriter) error
}

type ListTools200JSONResponse ToolList

func (response ListTools200JSONResponse) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateToolRequestObject struct {
	Body *CreateToolJSONRequestBody
}

type CreateToolResponseObject interface {
	VisitCreateToolResponse(w http.ResponseWriter) error
}

type CreateTool201JSONResponse Tool

func (response CreateTool201JSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTool400JSONResponse BadRequest

func (response CreateTool400JSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteToolRequestObject struct {
	ToolId openapi_types.UUID `json:"tool_id"`
}

type DeleteToolResponseObject interface {
	VisitDeleteToolResponse(w http.ResponseWriter) error
}

type DeleteTool204Response struct {
}

func (response DeleteTool204Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTool404JSONResponse NotFound

func (response DeleteTool404JSONResponse) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetToolByIdRequestObject struct {
	ToolId openapi_types.UUID `json:"tool_id"`
}

type GetToolByIdResponseObject interface {
	VisitGetToolByIdResponse(w http.ResponseWriter) error
}

type GetToolById200JSONResponse Tool

func (response GetToolById200JSONResponse) VisitGetToolByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetToolById404JSONResponse NotFound

func (response GetToolById404JSONResponse) VisitGetToolByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateToolRequestObject struct {
	ToolId openapi_types.UUID `json:"tool_id"`
	Body   *UpdateToolJSONRequestBody
}

type UpdateToolResponseObject interface {
	VisitUpdateToolResponse(w http.ResponseWriter) error
}

type UpdateTool200JSONResponse Tool

func (response UpdateTool200JSONResponse) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTool404JSONResponse NotFound

func (response UpdateTool404JSONResponse) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListUsersRequestObject struct {
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse UserList

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse User

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse BadRequest

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser409JSONResponse ResourceAlreadyExists

func (response CreateUser409JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUser404JSONResponse NotFound

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type GetUserResponseObject interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse User

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser404JSONResponse NotFound

func (response GetUser404JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
	Body   *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse User

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser400JSONResponse BadRequest

func (response UpdateUser400JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404JSONResponse NotFound

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser409JSONResponse ResourceAlreadyExists

func (response UpdateUser409JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleForUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type ListRoleForUserResponseObject interface {
	VisitListRoleForUserResponse(w http.ResponseWriter) error
}

type ListRoleForUser200JSONResponse UserRoleMappingList

func (response ListRoleForUser200JSONResponse) VisitListRoleForUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRoleForUser404JSONResponse NotFound

func (response ListRoleForUser404JSONResponse) VisitListRoleForUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddRoleToUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
	Body   *AddRoleToUserJSONRequestBody
}

type AddRoleToUserResponseObject interface {
	VisitAddRoleToUserResponse(w http.ResponseWriter) error
}

type AddRoleToUser201JSONResponse UserRoleMapping

func (response AddRoleToUser201JSONResponse) VisitAddRoleToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddRoleToUser400JSONResponse BadRequest

func (response AddRoleToUser400JSONResponse) VisitAddRoleToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddRoleToUser404JSONResponse NotFound

func (response AddRoleToUser404JSONResponse) VisitAddRoleToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AddRoleToUser409JSONResponse ResourceAlreadyExists

func (response AddRoleToUser409JSONResponse) VisitAddRoleToUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RemoveRoleFromUserRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
	RoleId openapi_types.UUID `json:"role_id"`
}

type RemoveRoleFromUserResponseObject interface {
	VisitRemoveRoleFromUserResponse(w http.ResponseWriter) error
}

type RemoveRoleFromUser204Response struct {
}

func (response RemoveRoleFromUser204Response) VisitRemoveRoleFromUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveRoleFromUser404JSONResponse NotFound

func (response RemoveRoleFromUser404JSONResponse) VisitRemoveRoleFromUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all agents
	// (GET /v1/agents)
	ListAgents(ctx context.Context, request ListAgentsRequestObject) (ListAgentsResponseObject, error)
	// Create a new agent
	// (POST /v1/agents)
	CreateAgent(ctx context.Context, request CreateAgentRequestObject) (CreateAgentResponseObject, error)
	// Delete agent
	// (DELETE /v1/agents/{agent_id})
	DeleteAgent(ctx context.Context, request DeleteAgentRequestObject) (DeleteAgentResponseObject, error)
	// Get agent by ID
	// (GET /v1/agents/{agent_id})
	GetAgent(ctx context.Context, request GetAgentRequestObject) (GetAgentResponseObject, error)
	// Update agent
	// (PUT /v1/agents/{agent_id})
	UpdateAgent(ctx context.Context, request UpdateAgentRequestObject) (UpdateAgentResponseObject, error)
	// List permissions for agent mapping
	// (GET /v1/agents/{agent_id}/permissions)
	ListPermissionsForAgent(ctx context.Context, request ListPermissionsForAgentRequestObject) (ListPermissionsForAgentResponseObject, error)
	// Add permission to agent
	// (POST /v1/agents/{agent_id}/permissions)
	AddPermissionToAgent(ctx context.Context, request AddPermissionToAgentRequestObject) (AddPermissionToAgentResponseObject, error)
	// Remove permission from agent
	// (DELETE /v1/agents/{agent_id}/permissions/{permission_id})
	RemovePermissionFromAgent(ctx context.Context, request RemovePermissionFromAgentRequestObject) (RemovePermissionFromAgentResponseObject, error)
	// List all flows
	// (GET /v1/flows)
	ListFlows(ctx context.Context, request ListFlowsRequestObject) (ListFlowsResponseObject, error)
	// Create a new flow
	// (POST /v1/flows)
	CreateFlow(ctx context.Context, request CreateFlowRequestObject) (CreateFlowResponseObject, error)
	// Delete a flow
	// (DELETE /v1/flows/{flow_id})
	DeleteFlow(ctx context.Context, request DeleteFlowRequestObject) (DeleteFlowResponseObject, error)
	// Get flow by ID
	// (GET /v1/flows/{flow_id})
	GetFlow(ctx context.Context, request GetFlowRequestObject) (GetFlowResponseObject, error)
	// Update an existing flow
	// (PUT /v1/flows/{flow_id})
	UpdateFlow(ctx context.Context, request UpdateFlowRequestObject) (UpdateFlowResponseObject, error)
	// Execute a flow
	// (POST /v1/flows/{flow_id}/execute)
	ExecuteFlow(ctx context.Context, request ExecuteFlowRequestObject) (ExecuteFlowResponseObject, error)
	// Get flow run by ID
	// (GET /v1/flows/{flow_run_id}/status)
	GetFlowRun(ctx context.Context, request GetFlowRunRequestObject) (GetFlowRunResponseObject, error)
	// Mock standalone server
	// (POST /v1/mock/tool)
	MockStandaloneTool(ctx context.Context, request MockStandaloneToolRequestObject) (MockStandaloneToolResponseObject, error)
	// Mock standalone server with delay
	// (POST /v1/mock/tool_with_delay)
	MockStandaloneToolWithDelay(ctx context.Context, request MockStandaloneToolWithDelayRequestObject) (MockStandaloneToolWithDelayResponseObject, error)
	// List all permissions
	// (GET /v1/permissions)
	ListPermissions(ctx context.Context, request ListPermissionsRequestObject) (ListPermissionsResponseObject, error)
	// Create a new permission
	// (POST /v1/permissions)
	CreatePermission(ctx context.Context, request CreatePermissionRequestObject) (CreatePermissionResponseObject, error)
	// Delete permission
	// (DELETE /v1/permissions/{permission_id})
	DeletePermission(ctx context.Context, request DeletePermissionRequestObject) (DeletePermissionResponseObject, error)
	// Get permission by ID
	// (GET /v1/permissions/{permission_id})
	GetPermission(ctx context.Context, request GetPermissionRequestObject) (GetPermissionResponseObject, error)
	// Update permission
	// (PUT /v1/permissions/{permission_id})
	UpdatePermission(ctx context.Context, request UpdatePermissionRequestObject) (UpdatePermissionResponseObject, error)
	// List all roles
	// (GET /v1/roles)
	ListRoles(ctx context.Context, request ListRolesRequestObject) (ListRolesResponseObject, error)
	// Create a new role
	// (POST /v1/roles)
	CreateRole(ctx context.Context, request CreateRoleRequestObject) (CreateRoleResponseObject, error)
	// Delete role
	// (DELETE /v1/roles/{role_id})
	DeleteRole(ctx context.Context, request DeleteRoleRequestObject) (DeleteRoleResponseObject, error)
	// Get role by ID
	// (GET /v1/roles/{role_id})
	GetRole(ctx context.Context, request GetRoleRequestObject) (GetRoleResponseObject, error)
	// Update role
	// (PUT /v1/roles/{role_id})
	UpdateRole(ctx context.Context, request UpdateRoleRequestObject) (UpdateRoleResponseObject, error)
	// List permissions for role mapping
	// (GET /v1/roles/{role_id}/permissions)
	ListPermissionsForRole(ctx context.Context, request ListPermissionsForRoleRequestObject) (ListPermissionsForRoleResponseObject, error)
	// Add permission to role
	// (POST /v1/roles/{role_id}/permissions)
	AddPermissionToRole(ctx context.Context, request AddPermissionToRoleRequestObject) (AddPermissionToRoleResponseObject, error)
	// Remove permission from role
	// (DELETE /v1/roles/{role_id}/permissions/{permission_id})
	RemovePermissionFromRole(ctx context.Context, request RemovePermissionFromRoleRequestObject) (RemovePermissionFromRoleResponseObject, error)
	// List all tasks
	// (GET /v1/tasks)
	ListTasks(ctx context.Context, request ListTasksRequestObject) (ListTasksResponseObject, error)
	// Create a new task
	// (POST /v1/tasks)
	CreateTask(ctx context.Context, request CreateTaskRequestObject) (CreateTaskResponseObject, error)
	// Delete a task
	// (DELETE /v1/tasks/{task_id})
	DeleteTask(ctx context.Context, request DeleteTaskRequestObject) (DeleteTaskResponseObject, error)
	// Get task by ID
	// (GET /v1/tasks/{task_id})
	GetTask(ctx context.Context, request GetTaskRequestObject) (GetTaskResponseObject, error)
	// Update an existing task
	// (PUT /v1/tasks/{task_id})
	UpdateTask(ctx context.Context, request UpdateTaskRequestObject) (UpdateTaskResponseObject, error)
	// Execute a task
	// (POST /v1/tasks/{task_id}/execute)
	ExecuteTask(ctx context.Context, request ExecuteTaskRequestObject) (ExecuteTaskResponseObject, error)
	// Get all task runs for a task
	// (GET /v1/tasks/{task_id}/runs)
	ListTaskRuns(ctx context.Context, request ListTaskRunsRequestObject) (ListTaskRunsResponseObject, error)
	// Get task run by ID
	// (GET /v1/tasks/{task_run_id}/status)
	GetTaskRun(ctx context.Context, request GetTaskRunRequestObject) (GetTaskRunResponseObject, error)
	// List all threads
	// (GET /v1/threads)
	ListThreads(ctx context.Context, request ListThreadsRequestObject) (ListThreadsResponseObject, error)
	// Create a new thread
	// (POST /v1/threads)
	CreateThread(ctx context.Context, request CreateThreadRequestObject) (CreateThreadResponseObject, error)
	// Delete thread
	// (DELETE /v1/threads/{thread_id})
	DeleteThread(ctx context.Context, request DeleteThreadRequestObject) (DeleteThreadResponseObject, error)
	// Get thread by ID
	// (GET /v1/threads/{thread_id})
	GetThread(ctx context.Context, request GetThreadRequestObject) (GetThreadResponseObject, error)
	// Update thread title
	// (PUT /v1/threads/{thread_id})
	UpdateThreadTitle(ctx context.Context, request UpdateThreadTitleRequestObject) (UpdateThreadTitleResponseObject, error)
	// List all messages in a thread
	// (GET /v1/threads/{thread_id}/messages)
	ListMessages(ctx context.Context, request ListMessagesRequestObject) (ListMessagesResponseObject, error)
	// Create a new message in a thread
	// (POST /v1/threads/{thread_id}/messages)
	CreateMessage(ctx context.Context, request CreateMessageRequestObject) (CreateMessageResponseObject, error)
	// Delete message
	// (DELETE /v1/threads/{thread_id}/messages/{message_id})
	DeleteMessage(ctx context.Context, request DeleteMessageRequestObject) (DeleteMessageResponseObject, error)
	// Get message by ID
	// (GET /v1/threads/{thread_id}/messages/{message_id})
	GetMessage(ctx context.Context, request GetMessageRequestObject) (GetMessageResponseObject, error)
	// Update message
	// (PUT /v1/threads/{thread_id}/messages/{message_id})
	UpdateMessage(ctx context.Context, request UpdateMessageRequestObject) (UpdateMessageResponseObject, error)
	// List all tools
	// (GET /v1/tools)
	ListTools(ctx context.Context, request ListToolsRequestObject) (ListToolsResponseObject, error)
	// Create a new tool
	// (POST /v1/tools)
	CreateTool(ctx context.Context, request CreateToolRequestObject) (CreateToolResponseObject, error)
	// Delete a tool
	// (DELETE /v1/tools/{tool_id})
	DeleteTool(ctx context.Context, request DeleteToolRequestObject) (DeleteToolResponseObject, error)
	// Get a tool by ID
	// (GET /v1/tools/{tool_id})
	GetToolById(ctx context.Context, request GetToolByIdRequestObject) (GetToolByIdResponseObject, error)
	// Update a tool
	// (PUT /v1/tools/{tool_id})
	UpdateTool(ctx context.Context, request UpdateToolRequestObject) (UpdateToolResponseObject, error)
	// List all users
	// (GET /v1/users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Create a new user
	// (POST /v1/users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete user
	// (DELETE /v1/users/{user_id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Get user by ID
	// (GET /v1/users/{user_id})
	GetUser(ctx context.Context, request GetUserRequestObject) (GetUserResponseObject, error)
	// Update user
	// (PUT /v1/users/{user_id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// List role for user mapping
	// (GET /v1/users/{user_id}/roles)
	ListRoleForUser(ctx context.Context, request ListRoleForUserRequestObject) (ListRoleForUserResponseObject, error)
	// Add role to user
	// (POST /v1/users/{user_id}/roles)
	AddRoleToUser(ctx context.Context, request AddRoleToUserRequestObject) (AddRoleToUserResponseObject, error)
	// Remove role from user
	// (DELETE /v1/users/{user_id}/roles/{role_id})
	RemoveRoleFromUser(ctx context.Context, request RemoveRoleFromUserRequestObject) (RemoveRoleFromUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// ListAgents operation middleware
func (sh *strictHandler) ListAgents(w http.ResponseWriter, r *http.Request) {
	var request ListAgentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListAgents(ctx, request.(ListAgentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAgents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListAgentsResponseObject); ok {
		if err := validResponse.VisitListAgentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateAgent operation middleware
func (sh *strictHandler) CreateAgent(w http.ResponseWriter, r *http.Request) {
	var request CreateAgentRequestObject

	var body CreateAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateAgent(ctx, request.(CreateAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateAgentResponseObject); ok {
		if err := validResponse.VisitCreateAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteAgent operation middleware
func (sh *strictHandler) DeleteAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request DeleteAgentRequestObject

	request.AgentId = agentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAgent(ctx, request.(DeleteAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteAgentResponseObject); ok {
		if err := validResponse.VisitDeleteAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetAgent operation middleware
func (sh *strictHandler) GetAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request GetAgentRequestObject

	request.AgentId = agentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAgent(ctx, request.(GetAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAgentResponseObject); ok {
		if err := validResponse.VisitGetAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateAgent operation middleware
func (sh *strictHandler) UpdateAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request UpdateAgentRequestObject

	request.AgentId = agentId

	var body UpdateAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateAgent(ctx, request.(UpdateAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateAgentResponseObject); ok {
		if err := validResponse.VisitUpdateAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPermissionsForAgent operation middleware
func (sh *strictHandler) ListPermissionsForAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request ListPermissionsForAgentRequestObject

	request.AgentId = agentId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPermissionsForAgent(ctx, request.(ListPermissionsForAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPermissionsForAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPermissionsForAgentResponseObject); ok {
		if err := validResponse.VisitListPermissionsForAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddPermissionToAgent operation middleware
func (sh *strictHandler) AddPermissionToAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID) {
	var request AddPermissionToAgentRequestObject

	request.AgentId = agentId

	var body AddPermissionToAgentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddPermissionToAgent(ctx, request.(AddPermissionToAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPermissionToAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddPermissionToAgentResponseObject); ok {
		if err := validResponse.VisitAddPermissionToAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemovePermissionFromAgent operation middleware
func (sh *strictHandler) RemovePermissionFromAgent(w http.ResponseWriter, r *http.Request, agentId openapi_types.UUID, permissionId openapi_types.UUID) {
	var request RemovePermissionFromAgentRequestObject

	request.AgentId = agentId
	request.PermissionId = permissionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RemovePermissionFromAgent(ctx, request.(RemovePermissionFromAgentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemovePermissionFromAgent")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RemovePermissionFromAgentResponseObject); ok {
		if err := validResponse.VisitRemovePermissionFromAgentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFlows operation middleware
func (sh *strictHandler) ListFlows(w http.ResponseWriter, r *http.Request, params ListFlowsParams) {
	var request ListFlowsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFlows(ctx, request.(ListFlowsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFlows")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFlowsResponseObject); ok {
		if err := validResponse.VisitListFlowsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFlow operation middleware
func (sh *strictHandler) CreateFlow(w http.ResponseWriter, r *http.Request) {
	var request CreateFlowRequestObject

	var body CreateFlowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFlow(ctx, request.(CreateFlowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFlow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFlowResponseObject); ok {
		if err := validResponse.VisitCreateFlowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFlow operation middleware
func (sh *strictHandler) DeleteFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	var request DeleteFlowRequestObject

	request.FlowId = flowId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFlow(ctx, request.(DeleteFlowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFlow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFlowResponseObject); ok {
		if err := validResponse.VisitDeleteFlowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlow operation middleware
func (sh *strictHandler) GetFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	var request GetFlowRequestObject

	request.FlowId = flowId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlow(ctx, request.(GetFlowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlowResponseObject); ok {
		if err := validResponse.VisitGetFlowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateFlow operation middleware
func (sh *strictHandler) UpdateFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	var request UpdateFlowRequestObject

	request.FlowId = flowId

	var body UpdateFlowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateFlow(ctx, request.(UpdateFlowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateFlow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateFlowResponseObject); ok {
		if err := validResponse.VisitUpdateFlowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteFlow operation middleware
func (sh *strictHandler) ExecuteFlow(w http.ResponseWriter, r *http.Request, flowId openapi_types.UUID) {
	var request ExecuteFlowRequestObject

	request.FlowId = flowId

	var body ExecuteFlowJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteFlow(ctx, request.(ExecuteFlowRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteFlow")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteFlowResponseObject); ok {
		if err := validResponse.VisitExecuteFlowResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetFlowRun operation middleware
func (sh *strictHandler) GetFlowRun(w http.ResponseWriter, r *http.Request, flowRunId openapi_types.UUID) {
	var request GetFlowRunRequestObject

	request.FlowRunId = flowRunId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetFlowRun(ctx, request.(GetFlowRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFlowRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetFlowRunResponseObject); ok {
		if err := validResponse.VisitGetFlowRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MockStandaloneTool operation middleware
func (sh *strictHandler) MockStandaloneTool(w http.ResponseWriter, r *http.Request) {
	var request MockStandaloneToolRequestObject

	var body MockStandaloneToolJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MockStandaloneTool(ctx, request.(MockStandaloneToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MockStandaloneTool")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MockStandaloneToolResponseObject); ok {
		if err := validResponse.VisitMockStandaloneToolResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MockStandaloneToolWithDelay operation middleware
func (sh *strictHandler) MockStandaloneToolWithDelay(w http.ResponseWriter, r *http.Request) {
	var request MockStandaloneToolWithDelayRequestObject

	var body MockStandaloneToolWithDelayJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MockStandaloneToolWithDelay(ctx, request.(MockStandaloneToolWithDelayRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MockStandaloneToolWithDelay")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MockStandaloneToolWithDelayResponseObject); ok {
		if err := validResponse.VisitMockStandaloneToolWithDelayResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPermissions operation middleware
func (sh *strictHandler) ListPermissions(w http.ResponseWriter, r *http.Request) {
	var request ListPermissionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPermissions(ctx, request.(ListPermissionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPermissions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPermissionsResponseObject); ok {
		if err := validResponse.VisitListPermissionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreatePermission operation middleware
func (sh *strictHandler) CreatePermission(w http.ResponseWriter, r *http.Request) {
	var request CreatePermissionRequestObject

	var body CreatePermissionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePermission(ctx, request.(CreatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePermission")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreatePermissionResponseObject); ok {
		if err := validResponse.VisitCreatePermissionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeletePermission operation middleware
func (sh *strictHandler) DeletePermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID) {
	var request DeletePermissionRequestObject

	request.PermissionId = permissionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePermission(ctx, request.(DeletePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePermission")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeletePermissionResponseObject); ok {
		if err := validResponse.VisitDeletePermissionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPermission operation middleware
func (sh *strictHandler) GetPermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID) {
	var request GetPermissionRequestObject

	request.PermissionId = permissionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPermission(ctx, request.(GetPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPermission")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPermissionResponseObject); ok {
		if err := validResponse.VisitGetPermissionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePermission operation middleware
func (sh *strictHandler) UpdatePermission(w http.ResponseWriter, r *http.Request, permissionId openapi_types.UUID) {
	var request UpdatePermissionRequestObject

	request.PermissionId = permissionId

	var body UpdatePermissionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePermission(ctx, request.(UpdatePermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePermission")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdatePermissionResponseObject); ok {
		if err := validResponse.VisitUpdatePermissionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRoles operation middleware
func (sh *strictHandler) ListRoles(w http.ResponseWriter, r *http.Request) {
	var request ListRolesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRoles(ctx, request.(ListRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRoles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRolesResponseObject); ok {
		if err := validResponse.VisitListRolesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRole operation middleware
func (sh *strictHandler) CreateRole(w http.ResponseWriter, r *http.Request) {
	var request CreateRoleRequestObject

	var body CreateRoleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRole(ctx, request.(CreateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRoleResponseObject); ok {
		if err := validResponse.VisitCreateRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRole operation middleware
func (sh *strictHandler) DeleteRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	var request DeleteRoleRequestObject

	request.RoleId = roleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRole(ctx, request.(DeleteRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRoleResponseObject); ok {
		if err := validResponse.VisitDeleteRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRole operation middleware
func (sh *strictHandler) GetRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	var request GetRoleRequestObject

	request.RoleId = roleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRole(ctx, request.(GetRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRoleResponseObject); ok {
		if err := validResponse.VisitGetRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateRole operation middleware
func (sh *strictHandler) UpdateRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	var request UpdateRoleRequestObject

	request.RoleId = roleId

	var body UpdateRoleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRole(ctx, request.(UpdateRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateRoleResponseObject); ok {
		if err := validResponse.VisitUpdateRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListPermissionsForRole operation middleware
func (sh *strictHandler) ListPermissionsForRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	var request ListPermissionsForRoleRequestObject

	request.RoleId = roleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListPermissionsForRole(ctx, request.(ListPermissionsForRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPermissionsForRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListPermissionsForRoleResponseObject); ok {
		if err := validResponse.VisitListPermissionsForRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddPermissionToRole operation middleware
func (sh *strictHandler) AddPermissionToRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID) {
	var request AddPermissionToRoleRequestObject

	request.RoleId = roleId

	var body AddPermissionToRoleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddPermissionToRole(ctx, request.(AddPermissionToRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddPermissionToRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddPermissionToRoleResponseObject); ok {
		if err := validResponse.VisitAddPermissionToRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemovePermissionFromRole operation middleware
func (sh *strictHandler) RemovePermissionFromRole(w http.ResponseWriter, r *http.Request, roleId openapi_types.UUID, permissionId openapi_types.UUID) {
	var request RemovePermissionFromRoleRequestObject

	request.RoleId = roleId
	request.PermissionId = permissionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RemovePermissionFromRole(ctx, request.(RemovePermissionFromRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemovePermissionFromRole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RemovePermissionFromRoleResponseObject); ok {
		if err := validResponse.VisitRemovePermissionFromRoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTasks operation middleware
func (sh *strictHandler) ListTasks(w http.ResponseWriter, r *http.Request, params ListTasksParams) {
	var request ListTasksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTasks(ctx, request.(ListTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTasks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTasksResponseObject); ok {
		if err := validResponse.VisitListTasksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTask operation middleware
func (sh *strictHandler) CreateTask(w http.ResponseWriter, r *http.Request) {
	var request CreateTaskRequestObject

	var body CreateTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTask(ctx, request.(CreateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTaskResponseObject); ok {
		if err := validResponse.VisitCreateTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTask operation middleware
func (sh *strictHandler) DeleteTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	var request DeleteTaskRequestObject

	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTask(ctx, request.(DeleteTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTaskResponseObject); ok {
		if err := validResponse.VisitDeleteTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTask operation middleware
func (sh *strictHandler) GetTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	var request GetTaskRequestObject

	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTask(ctx, request.(GetTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTaskResponseObject); ok {
		if err := validResponse.VisitGetTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTask operation middleware
func (sh *strictHandler) UpdateTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	var request UpdateTaskRequestObject

	request.TaskId = taskId

	var body UpdateTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTask(ctx, request.(UpdateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTaskResponseObject); ok {
		if err := validResponse.VisitUpdateTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteTask operation middleware
func (sh *strictHandler) ExecuteTask(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	var request ExecuteTaskRequestObject

	request.TaskId = taskId

	var body ExecuteTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteTask(ctx, request.(ExecuteTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ExecuteTaskResponseObject); ok {
		if err := validResponse.VisitExecuteTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTaskRuns operation middleware
func (sh *strictHandler) ListTaskRuns(w http.ResponseWriter, r *http.Request, taskId openapi_types.UUID) {
	var request ListTaskRunsRequestObject

	request.TaskId = taskId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTaskRuns(ctx, request.(ListTaskRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTaskRuns")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTaskRunsResponseObject); ok {
		if err := validResponse.VisitListTaskRunsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTaskRun operation middleware
func (sh *strictHandler) GetTaskRun(w http.ResponseWriter, r *http.Request, taskRunId openapi_types.UUID) {
	var request GetTaskRunRequestObject

	request.TaskRunId = taskRunId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaskRun(ctx, request.(GetTaskRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaskRun")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetTaskRunResponseObject); ok {
		if err := validResponse.VisitGetTaskRunResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListThreads operation middleware
func (sh *strictHandler) ListThreads(w http.ResponseWriter, r *http.Request) {
	var request ListThreadsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListThreads(ctx, request.(ListThreadsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListThreads")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListThreadsResponseObject); ok {
		if err := validResponse.VisitListThreadsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateThread operation middleware
func (sh *strictHandler) CreateThread(w http.ResponseWriter, r *http.Request) {
	var request CreateThreadRequestObject

	var body CreateThreadJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateThread(ctx, request.(CreateThreadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateThread")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateThreadResponseObject); ok {
		if err := validResponse.VisitCreateThreadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteThread operation middleware
func (sh *strictHandler) DeleteThread(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	var request DeleteThreadRequestObject

	request.ThreadId = threadId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteThread(ctx, request.(DeleteThreadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteThread")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteThreadResponseObject); ok {
		if err := validResponse.VisitDeleteThreadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetThread operation middleware
func (sh *strictHandler) GetThread(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	var request GetThreadRequestObject

	request.ThreadId = threadId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetThread(ctx, request.(GetThreadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetThread")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetThreadResponseObject); ok {
		if err := validResponse.VisitGetThreadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateThreadTitle operation middleware
func (sh *strictHandler) UpdateThreadTitle(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	var request UpdateThreadTitleRequestObject

	request.ThreadId = threadId

	var body UpdateThreadTitleJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateThreadTitle(ctx, request.(UpdateThreadTitleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateThreadTitle")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateThreadTitleResponseObject); ok {
		if err := validResponse.VisitUpdateThreadTitleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListMessages operation middleware
func (sh *strictHandler) ListMessages(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	var request ListMessagesRequestObject

	request.ThreadId = threadId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListMessages(ctx, request.(ListMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMessages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListMessagesResponseObject); ok {
		if err := validResponse.VisitListMessagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateMessage operation middleware
func (sh *strictHandler) CreateMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID) {
	var request CreateMessageRequestObject

	request.ThreadId = threadId

	var body CreateMessageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMessage(ctx, request.(CreateMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateMessageResponseObject); ok {
		if err := validResponse.VisitCreateMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMessage operation middleware
func (sh *strictHandler) DeleteMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID) {
	var request DeleteMessageRequestObject

	request.ThreadId = threadId
	request.MessageId = messageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMessage(ctx, request.(DeleteMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteMessageResponseObject); ok {
		if err := validResponse.VisitDeleteMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMessage operation middleware
func (sh *strictHandler) GetMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID) {
	var request GetMessageRequestObject

	request.ThreadId = threadId
	request.MessageId = messageId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMessage(ctx, request.(GetMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMessageResponseObject); ok {
		if err := validResponse.VisitGetMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMessage operation middleware
func (sh *strictHandler) UpdateMessage(w http.ResponseWriter, r *http.Request, threadId openapi_types.UUID, messageId openapi_types.UUID) {
	var request UpdateMessageRequestObject

	request.ThreadId = threadId
	request.MessageId = messageId

	var body UpdateMessageJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMessage(ctx, request.(UpdateMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMessage")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateMessageResponseObject); ok {
		if err := validResponse.VisitUpdateMessageResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTools operation middleware
func (sh *strictHandler) ListTools(w http.ResponseWriter, r *http.Request) {
	var request ListToolsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTools(ctx, request.(ListToolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTools")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListToolsResponseObject); ok {
		if err := validResponse.VisitListToolsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTool operation middleware
func (sh *strictHandler) CreateTool(w http.ResponseWriter, r *http.Request) {
	var request CreateToolRequestObject

	var body CreateToolJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTool(ctx, request.(CreateToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTool")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateToolResponseObject); ok {
		if err := validResponse.VisitCreateToolResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTool operation middleware
func (sh *strictHandler) DeleteTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID) {
	var request DeleteToolRequestObject

	request.ToolId = toolId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTool(ctx, request.(DeleteToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTool")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteToolResponseObject); ok {
		if err := validResponse.VisitDeleteToolResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetToolById operation middleware
func (sh *strictHandler) GetToolById(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID) {
	var request GetToolByIdRequestObject

	request.ToolId = toolId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetToolById(ctx, request.(GetToolByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetToolById")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetToolByIdResponseObject); ok {
		if err := validResponse.VisitGetToolByIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTool operation middleware
func (sh *strictHandler) UpdateTool(w http.ResponseWriter, r *http.Request, toolId openapi_types.UUID) {
	var request UpdateToolRequestObject

	request.ToolId = toolId

	var body UpdateToolJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTool(ctx, request.(UpdateToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTool")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateToolResponseObject); ok {
		if err := validResponse.VisitUpdateToolResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(w http.ResponseWriter, r *http.Request) {
	var request ListUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request DeleteUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx, request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		if err := validResponse.VisitDeleteUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUser operation middleware
func (sh *strictHandler) GetUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request GetUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUser(ctx, request.(GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserResponseObject); ok {
		if err := validResponse.VisitGetUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request UpdateUserRequestObject

	request.UserId = userId

	var body UpdateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx, request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		if err := validResponse.VisitUpdateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRoleForUser operation middleware
func (sh *strictHandler) ListRoleForUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request ListRoleForUserRequestObject

	request.UserId = userId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRoleForUser(ctx, request.(ListRoleForUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRoleForUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRoleForUserResponseObject); ok {
		if err := validResponse.VisitListRoleForUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// AddRoleToUser operation middleware
func (sh *strictHandler) AddRoleToUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	var request AddRoleToUserRequestObject

	request.UserId = userId

	var body AddRoleToUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AddRoleToUser(ctx, request.(AddRoleToUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddRoleToUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AddRoleToUserResponseObject); ok {
		if err := validResponse.VisitAddRoleToUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveRoleFromUser operation middleware
func (sh *strictHandler) RemoveRoleFromUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID, roleId openapi_types.UUID) {
	var request RemoveRoleFromUserRequestObject

	request.UserId = userId
	request.RoleId = roleId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveRoleFromUser(ctx, request.(RemoveRoleFromUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveRoleFromUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RemoveRoleFromUserResponseObject); ok {
		if err := validResponse.VisitRemoveRoleFromUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
