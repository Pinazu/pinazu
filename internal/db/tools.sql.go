// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tools.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createTool = `-- name: CreateTool :one
INSERT INTO tools (
    name,
    description, 
    config,
    created_by
) VALUES (
    $1, $2, $3, $4
) RETURNING id, name, description, config, created_at, created_by, updated_at
`

type CreateToolParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Config      ToolConfig  `db:"config" json:"config"`
	CreatedBy   uuid.UUID   `db:"created_by" json:"created_by"`
}

func (q *Queries) CreateTool(ctx context.Context, arg CreateToolParams) (Tool, error) {
	row := q.db.QueryRow(ctx, createTool,
		arg.Name,
		arg.Description,
		arg.Config,
		arg.CreatedBy,
	)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Config,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTool = `-- name: DeleteTool :exec
DELETE FROM tools WHERE id = $1
`

func (q *Queries) DeleteTool(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTool, id)
	return err
}

const getToolById = `-- name: GetToolById :one
SELECT id, name, description, config, created_at, created_by, updated_at
FROM tools
WHERE id = $1
`

func (q *Queries) GetToolById(ctx context.Context, id uuid.UUID) (Tool, error) {
	row := q.db.QueryRow(ctx, getToolById, id)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Config,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getToolInfoByName = `-- name: GetToolInfoByName :one
SELECT id, name, description, config, created_at, created_by, updated_at FROM tools WHERE name = $1
`

func (q *Queries) GetToolInfoByName(ctx context.Context, name string) (Tool, error) {
	row := q.db.QueryRow(ctx, getToolInfoByName, name)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Config,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const getToolsByIDs = `-- name: GetToolsByIDs :many
SELECT id, name, description, config, created_at, created_by, updated_at FROM tools 
WHERE id = ANY($1::uuid[])
ORDER BY name
`

func (q *Queries) GetToolsByIDs(ctx context.Context, dollar_1 []uuid.UUID) ([]Tool, error) {
	rows, err := q.db.Query(ctx, getToolsByIDs, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tool{}
	for rows.Next() {
		var i Tool
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Config,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTools = `-- name: ListTools :many

SELECT id, name, description, config, created_at, created_by, updated_at
FROM tools t
ORDER BY t.created_at DESC
`

// ==============================================
// TOOL QUERIES FOR SQLC
// ==============================================
func (q *Queries) ListTools(ctx context.Context) ([]Tool, error) {
	rows, err := q.db.Query(ctx, listTools)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tool{}
	for rows.Next() {
		var i Tool
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Config,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTool = `-- name: UpdateTool :one
UPDATE tools SET
    description = COALESCE($2, description),
    config = COALESCE($3, config)
WHERE id = $1
RETURNING id, name, description, config, created_at, created_by, updated_at
`

type UpdateToolParams struct {
	ID          uuid.UUID   `db:"id" json:"id"`
	Description pgtype.Text `db:"description" json:"description"`
	Config      ToolConfig  `db:"config" json:"config"`
}

func (q *Queries) UpdateTool(ctx context.Context, arg UpdateToolParams) (Tool, error) {
	row := q.db.QueryRow(ctx, updateTool, arg.ID, arg.Description, arg.Config)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Config,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
	)
	return i, err
}
