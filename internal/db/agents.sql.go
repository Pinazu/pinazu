// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agents.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addAgentPermission = `-- name: AddAgentPermission :one
INSERT INTO agent_permission_mapping (agent_id, permission_id, assigned_by)
VALUES ($1, $2, $3)
RETURNING mapping_id, agent_id, permission_id, assigned_at, assigned_by
`

type AddAgentPermissionParams struct {
	AgentID      uuid.UUID `db:"agent_id" json:"agent_id"`
	PermissionID uuid.UUID `db:"permission_id" json:"permission_id"`
	AssignedBy   uuid.UUID `db:"assigned_by" json:"assigned_by"`
}

func (q *Queries) AddAgentPermission(ctx context.Context, arg AddAgentPermissionParams) (AgentPermissionMapping, error) {
	row := q.db.QueryRow(ctx, addAgentPermission, arg.AgentID, arg.PermissionID, arg.AssignedBy)
	var i AgentPermissionMapping
	err := row.Scan(
		&i.MappingID,
		&i.AgentID,
		&i.PermissionID,
		&i.AssignedAt,
		&i.AssignedBy,
	)
	return i, err
}

const checkAgentIDValid = `-- name: CheckAgentIDValid :one
SELECT EXISTS(SELECT 1 FROM agents WHERE id = $1) AS is_valid
`

func (q *Queries) CheckAgentIDValid(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, checkAgentIDValid, id)
	var is_valid bool
	err := row.Scan(&is_valid)
	return is_valid, err
}

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (name, description, specs, created_by, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, specs, created_by, created_at, updated_at
`

type CreateAgentParams struct {
	Name        string             `db:"name" json:"name"`
	Description pgtype.Text        `db:"description" json:"description"`
	Specs       pgtype.Text        `db:"specs" json:"specs"`
	CreatedBy   uuid.UUID          `db:"created_by" json:"created_by"`
	CreatedAt   pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRow(ctx, createAgent,
		arg.Name,
		arg.Description,
		arg.Specs,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Specs,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAgent = `-- name: DeleteAgent :exec
DELETE FROM agents WHERE id = $1
`

func (q *Queries) DeleteAgent(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAgent, id)
	return err
}

const getAgentByID = `-- name: GetAgentByID :one
SELECT id, name, description, specs, created_by, created_at, updated_at FROM agents WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAgentByID(ctx context.Context, id uuid.UUID) (Agent, error) {
	row := q.db.QueryRow(ctx, getAgentByID, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Specs,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgentSpecsByID = `-- name: GetAgentSpecsByID :one
SELECT specs FROM agents WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAgentSpecsByID(ctx context.Context, id uuid.UUID) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getAgentSpecsByID, id)
	var specs pgtype.Text
	err := row.Scan(&specs)
	return specs, err
}

const getAgents = `-- name: GetAgents :many
SELECT id, name, description, specs, created_by, created_at, updated_at FROM agents ORDER BY name
`

func (q *Queries) GetAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.db.Query(ctx, getAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Agent{}
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Specs,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPermissionsForAgent = `-- name: ListPermissionsForAgent :many
SELECT mapping_id, agent_id, permission_id, assigned_at, assigned_by FROM agent_permission_mapping WHERE agent_id = $1 ORDER BY assigned_at DESC
`

func (q *Queries) ListPermissionsForAgent(ctx context.Context, agentID uuid.UUID) ([]AgentPermissionMapping, error) {
	rows, err := q.db.Query(ctx, listPermissionsForAgent, agentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AgentPermissionMapping{}
	for rows.Next() {
		var i AgentPermissionMapping
		if err := rows.Scan(
			&i.MappingID,
			&i.AgentID,
			&i.PermissionID,
			&i.AssignedAt,
			&i.AssignedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAgentPermission = `-- name: RemoveAgentPermission :exec
DELETE FROM agent_permission_mapping WHERE agent_id = $1 AND permission_id = $2
`

type RemoveAgentPermissionParams struct {
	AgentID      uuid.UUID `db:"agent_id" json:"agent_id"`
	PermissionID uuid.UUID `db:"permission_id" json:"permission_id"`
}

func (q *Queries) RemoveAgentPermission(ctx context.Context, arg RemoveAgentPermissionParams) error {
	_, err := q.db.Exec(ctx, removeAgentPermission, arg.AgentID, arg.PermissionID)
	return err
}

const updateAgent = `-- name: UpdateAgent :one
UPDATE agents
SET name = $1, description = $2, specs = $3
WHERE id = $4
RETURNING id, name, description, specs, created_by, created_at, updated_at
`

type UpdateAgentParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Specs       pgtype.Text `db:"specs" json:"specs"`
	ID          uuid.UUID   `db:"id" json:"id"`
}

func (q *Queries) UpdateAgent(ctx context.Context, arg UpdateAgentParams) (Agent, error) {
	row := q.db.QueryRow(ctx, updateAgent,
		arg.Name,
		arg.Description,
		arg.Specs,
		arg.ID,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Specs,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
