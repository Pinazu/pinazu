// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addPermissionToRole = `-- name: AddPermissionToRole :one
INSERT INTO role_permission_mapping (role_id, permission_id, assigned_by)
VALUES ($1, $2, $3)
RETURNING mapping_id, role_id, permission_id, assigned_at, assigned_by
`

type AddPermissionToRoleParams struct {
	RoleID       uuid.UUID `db:"role_id" json:"role_id"`
	PermissionID uuid.UUID `db:"permission_id" json:"permission_id"`
	AssignedBy   uuid.UUID `db:"assigned_by" json:"assigned_by"`
}

func (q *Queries) AddPermissionToRole(ctx context.Context, arg AddPermissionToRoleParams) (RolePermissionMapping, error) {
	row := q.db.QueryRow(ctx, addPermissionToRole, arg.RoleID, arg.PermissionID, arg.AssignedBy)
	var i RolePermissionMapping
	err := row.Scan(
		&i.MappingID,
		&i.RoleID,
		&i.PermissionID,
		&i.AssignedAt,
		&i.AssignedBy,
	)
	return i, err
}

const checkPermissionExistsForRole = `-- name: CheckPermissionExistsForRole :one
SELECT EXISTS(SELECT 1 FROM role_permission_mapping WHERE role_id = $1 AND permission_id = $2) AS exists
`

type CheckPermissionExistsForRoleParams struct {
	RoleID       uuid.UUID `db:"role_id" json:"role_id"`
	PermissionID uuid.UUID `db:"permission_id" json:"permission_id"`
}

func (q *Queries) CheckPermissionExistsForRole(ctx context.Context, arg CheckPermissionExistsForRoleParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkPermissionExistsForRole, arg.RoleID, arg.PermissionID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (name, description, is_system)
VALUES ($1, $2, $3)
RETURNING id, name, description, is_system, created_at, updated_at
`

type CreateRoleParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	IsSystem    pgtype.Bool `db:"is_system" json:"is_system"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, arg.Name, arg.Description, arg.IsSystem)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePermissionFromRole = `-- name: DeletePermissionFromRole :exec
DELETE FROM role_permission_mapping WHERE role_id = $1 AND permission_id = $2
`

type DeletePermissionFromRoleParams struct {
	RoleID       uuid.UUID `db:"role_id" json:"role_id"`
	PermissionID uuid.UUID `db:"permission_id" json:"permission_id"`
}

func (q *Queries) DeletePermissionFromRole(ctx context.Context, arg DeletePermissionFromRoleParams) error {
	_, err := q.db.Exec(ctx, deletePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, name, description, is_system, created_at, updated_at FROM roles ORDER BY name
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsSystem,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, name, description, is_system, created_at, updated_at FROM roles WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRoleByID(ctx context.Context, id uuid.UUID) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPermissionForRole = `-- name: ListPermissionForRole :many
SELECT mapping_id, role_id, permission_id, assigned_at, assigned_by FROM role_permission_mapping WHERE role_id = $1 ORDER BY assigned_at DESC
`

func (q *Queries) ListPermissionForRole(ctx context.Context, roleID uuid.UUID) ([]RolePermissionMapping, error) {
	rows, err := q.db.Query(ctx, listPermissionForRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermissionMapping{}
	for rows.Next() {
		var i RolePermissionMapping
		if err := rows.Scan(
			&i.MappingID,
			&i.RoleID,
			&i.PermissionID,
			&i.AssignedAt,
			&i.AssignedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET name = $1, description = $2, is_system = $3, updated_at = NOW()
WHERE id = $4
RETURNING id, name, description, is_system, created_at, updated_at
`

type UpdateRoleParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	IsSystem    pgtype.Bool `db:"is_system" json:"is_system"`
	ID          uuid.UUID   `db:"id" json:"id"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, updateRole,
		arg.Name,
		arg.Description,
		arg.IsSystem,
		arg.ID,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsSystem,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
