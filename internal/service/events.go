// Code generated by api/generate_event.go. DO NOT EDIT.
// versions:
//   pinazu current

package service

import (
	"fmt"
	"time"

	"github.com/anthropics/anthropic-sdk-go"
	"github.com/google/uuid"
	"gitlab.kalliopedata.io/genai-apps/pinazu-core/internal/db"
)

const (
	AgentInvokeEventSubject            EventSubject = "v1.svc.agent.invoke"
	FlowRunStatusEventSubject          EventSubject = "v1.svc.worker.flow.status"
	FlowTaskRunStatusEventSubject      EventSubject = "v1.svc.worker.task.status"
	FlowRunExecuteEventSubject         EventSubject = "v1.svc.worker.flow.execute"
	FlowRunExecuteRequestEventSubject  EventSubject = "v1.svc.flowrun.execute"
	TaskExecuteEventSubject            EventSubject = "v1.svc.task.execute"
	TaskHandoffEventSubject            EventSubject = "v1.svc.task.handoff"
	TaskFinishEventSubject             EventSubject = "v1.svc.task.finish"
	TaskCancelEventSubject             EventSubject = "v1.svc.task.cancel"
	ToolDispatchEventSubject           EventSubject = "v1.svc.tool.dispatch"
	ToolGatherEventSubject             EventSubject = "v1.svc.tool.gather"
	StandaloneToolRequestEventSubject  EventSubject = "v1.svc.tool.standalone.execute"
	MCPToolRequestEventSubject         EventSubject = "v1.svc.tool.mcp.execute"
	WebsocketResponseEventSubject      EventSubject = "v1.svc.api.ws.response"
	WebsocketTaskLifecycleEventSubject EventSubject = "v1.svc.api.ws.task.lifecycle"
)

// Event definitions
type AgentInvokeEventMessage struct {
	AgentId     uuid.UUID    `json:"agent_id"`
	Messages    []db.JsonRaw `json:"messages"`
	RecipientId uuid.UUID    `json:"recipient_id"`
}

// Subject returns the event subject for AgentInvoke events
func (msg *AgentInvokeEventMessage) Subject() EventSubject {
	return AgentInvokeEventSubject
}

// Validate checks if the AgentInvoke event message is valid
func (msg *AgentInvokeEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.AgentId == uuid.Nil {
		return fmt.Errorf("agent_id field is required")
	}
	if len(msg.Messages) < 1 {
		return fmt.Errorf("messages field is required")
	}
	if msg.RecipientId == uuid.Nil {
		return fmt.Errorf("recipient_id field is required")
	}
	return nil
}

type FlowRunStatusEventMessage struct {
	FlowRunId      uuid.UUID     `json:"flow_run_id"`
	Status         db.FlowStatus `json:"status"`
	EventTimestamp time.Time     `json:"event_timestamp"`
	ErrorMessage   string        `json:"error_message,omitempty"`
}

// Subject returns the event subject for FlowRunStatus events
func (msg *FlowRunStatusEventMessage) Subject() EventSubject {
	return FlowRunStatusEventSubject
}

// Validate checks if the FlowRunStatus event message is valid
func (msg *FlowRunStatusEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.FlowRunId == uuid.Nil {
		return fmt.Errorf("flow_run_id is required")
	}
	if msg.Status == "" {
		return fmt.Errorf("status is required")
	}
	if msg.EventTimestamp.IsZero() {
		return fmt.Errorf("event_timestamp is required")
	}

	return nil
}

type FlowTaskRunStatusEventMessage struct {
	FlowRunId      uuid.UUID     `json:"flow_run_id"`
	TaskName       string        `json:"task_name"`
	Status         db.FlowStatus `json:"status"`
	ResultCacheKey *string       `json:"result_cache_key,omitempty"`
	EventTimestamp time.Time     `json:"event_timestamp"`
	ErrorMessage   string        `json:"error_message,omitempty"`
}

// Subject returns the event subject for FlowTaskRunStatus events
func (msg *FlowTaskRunStatusEventMessage) Subject() EventSubject {
	return FlowTaskRunStatusEventSubject
}

// Validate checks if the FlowTaskRunStatus event message is valid
func (msg *FlowTaskRunStatusEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.FlowRunId == uuid.Nil {
		return fmt.Errorf("task_run_id is required")
	}
	if msg.TaskName == "" {
		return fmt.Errorf("task_name is required")
	}
	if msg.Status == "" {
		return fmt.Errorf("status is required")
	}
	if msg.EventTimestamp.IsZero() {
		return fmt.Errorf("event_timestamp is required")
	}

	return nil
}

type FlowRunExecuteEventMessage struct {
	FlowRunId          uuid.UUID              `json:"flow_run_id"`
	Parameters         map[string]interface{} `json:"parameters,omitempty"`
	Engine             string                 `json:"engine"`
	CodeLocation       string                 `json:"code_location"`
	Entrypoint         string                 `json:"entrypoint"`
	Args               []string               `json:"args"`
	SuccessTaskResults map[string]string      `json:"success_task_results"`
	EventTimestamp     time.Time              `json:"event_timestamp"`
}

// Subject returns the event subject for FlowRunExecute events
func (msg *FlowRunExecuteEventMessage) Subject() EventSubject {
	return FlowRunExecuteEventSubject
}

// Validate checks if the FlowRunExecute event message is valid
func (msg *FlowRunExecuteEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.FlowRunId == uuid.Nil {
		return fmt.Errorf("flow_run_id is required")
	}
	if msg.Engine == "" {
		return fmt.Errorf("engine is required")
	}
	if msg.Engine != "process" {
		return fmt.Errorf("unsupported engine: %s, only 'process' is supported", msg.Engine)
	}
	if msg.Entrypoint == "" {
		return fmt.Errorf("entrypoint is required")
	}

	return nil
}

type FlowRunExecuteRequestEventMessage struct {
	FlowId     uuid.UUID              `json:"flow_id"`
	FlowRunId  *uuid.UUID             `json:"flow_run_id,omitempty"`
	Parameters map[string]interface{} `json:"parameters"`
	Engine     string                 `json:"engine"`
}

// Subject returns the event subject for FlowRunExecute events
func (msg *FlowRunExecuteRequestEventMessage) Subject() EventSubject {
	return FlowRunExecuteRequestEventSubject
}

// Validate checks if the FlowRunExecute event message is valid
func (msg *FlowRunExecuteRequestEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.FlowId == uuid.Nil {
		return fmt.Errorf("flow_id is required")
	}
	if msg.Engine == "" {
		msg.Engine = "process" // Default to process engine if not specified
	}

	return nil
}

type FlowRunExecuteResponseEventMessage struct {
	FlowRun db.FlowRun `json:"flow_run"`
}

// Subject returns the event subject for FlowRunExecute response events
func (msg *FlowRunExecuteResponseEventMessage) Subject() EventSubject {
	return FlowRunExecuteRequestEventSubject
}

// Validate checks if the FlowRunExecute response event message is valid
func (msg *FlowRunExecuteResponseEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	return nil
}

type TaskExecuteEventMessage struct {
	AgentId     uuid.UUID    `json:"agent_id"`
	RecipientId uuid.UUID    `json:"recipient_id"`
	Messages    []db.JsonRaw `json:"messages"`
}

// Subject returns the event subject for TaskExecute events
func (msg *TaskExecuteEventMessage) Subject() EventSubject {
	return TaskExecuteEventSubject
}

// Validate checks if the TaskExecute event message is valid
func (msg *TaskExecuteEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.AgentId == uuid.Nil {
		return fmt.Errorf("agent_id field is required")
	}
	if msg.RecipientId == uuid.Nil {
		return fmt.Errorf("recipient_id field is required")
	}
	if len(msg.Messages) < 1 {
		return fmt.Errorf("messages field is required")
	}

	return nil
}

type TaskHandoffEventMessage struct {
	ToolRunId        string       `json:"tool_run_id"`
	AgentID          uuid.UUID    `json:"agent_i_d"`
	AgentHandoffToID uuid.UUID    `json:"agent_handoff_to_i_d"`
	Messages         []db.JsonRaw `json:"messages"`
}

// Subject returns the event subject for TaskHandoff events
func (msg *TaskHandoffEventMessage) Subject() EventSubject {
	return TaskHandoffEventSubject
}

// Validate checks if the TaskHandoff event message is valid
func (msg *TaskHandoffEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.ToolRunId == "" {
		return fmt.Errorf("tool_run_id field is required")
	}
	if msg.AgentHandoffToID == uuid.Nil {
		return fmt.Errorf("agent_handoff_to_id field is required")
	}
	if msg.AgentID == uuid.Nil {
		return fmt.Errorf("agent_id field is required")
	}
	if len(msg.Messages) < 1 {
		return fmt.Errorf("messages field is required")
	}

	return nil
}

type TaskFinishEventMessage struct {
	AgentId     uuid.UUID    `json:"agent_id"`
	RecipientId uuid.UUID    `json:"recipient_id"`
	Response    db.JsonRaw   `json:"response"`
	Citations   []db.JsonRaw `json:"citations"`
}

// Subject returns the event subject for TaskFinish events
func (msg *TaskFinishEventMessage) Subject() EventSubject {
	return TaskFinishEventSubject
}

// Validate checks if the TaskFinish event message is valid
func (msg *TaskFinishEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.AgentId == uuid.Nil {
		return fmt.Errorf("agent_id field is required")
	}
	if msg.RecipientId == uuid.Nil {
		return fmt.Errorf("recipient_id field is required")
	}
	if msg.Response == nil {
		return fmt.Errorf("response field is required")
	}

	return nil
}

type TaskCancelEventMessage struct {
}

// Subject returns the event subject for TaskCancel events
func (msg *TaskCancelEventMessage) Subject() EventSubject {
	return TaskCancelEventSubject
}

// Validate checks if the TaskCancel event message is valid
func (msg *TaskCancelEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	// No validation needed for cancel event
	return nil
}

type ToolDispatchEventMessage struct {
	AgentId     uuid.UUID        `json:"agent_id"`
	Provider    db.ProviderModel `json:"provider"`
	RecipientId uuid.UUID        `json:"recipient_id"`
	Message     db.JsonRaw       `json:"message"`
}

// Subject returns the event subject for ToolDispatch events
func (msg *ToolDispatchEventMessage) Subject() EventSubject {
	return ToolDispatchEventSubject
}

// Validate checks if the ToolDispatch event message is valid
func (msg *ToolDispatchEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.AgentId == uuid.Nil {
		return fmt.Errorf("agent_id is required")
	}
	if msg.Provider == db.ProviderModelNil {
		return fmt.Errorf("provider is required")
	}
	if msg.RecipientId == uuid.Nil {
		return fmt.Errorf("recipient_id is required")
	}
	if msg.Message == nil {
		return fmt.Errorf("message is required")
	}

	return nil
}

type ToolGatherEventMessage struct {
	ToolRunId  string               `json:"tool_run_id"`
	Content    db.JsonRaw           `json:"content"`
	ResultType db.ResultMessageType `json:"result_type"`
	IsError    bool                 `json:"is_error"`
}

// Subject returns the event subject for ToolGather events
func (msg *ToolGatherEventMessage) Subject() EventSubject {
	return ToolGatherEventSubject
}

// Validate checks if the ToolGather event message is valid
func (msg *ToolGatherEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.ToolRunId == "" {
		return fmt.Errorf("tool_run_id field is required")
	}
	if msg.Content == nil {
		return fmt.Errorf("content field is required")
	}
	if msg.ResultType == "" {
		return fmt.Errorf("result_type field is required")
	}

	return nil
}

type StandaloneToolRequestEventMessage struct {
	ToolRunId  string         `json:"tool_run_id"`
	ToolName   string         `json:"tool_name"`
	ToolInput  map[string]any `json:"tool_input"`
	ToolURL    string         `json:"tool_u_r_l"`
	ToolAPIKey *string        `json:"tool_a_p_i_key"`
}

// Subject returns the event subject for StandaloneToolRequest events
func (msg *StandaloneToolRequestEventMessage) Subject() EventSubject {
	return StandaloneToolRequestEventSubject
}

// Validate checks if the StandaloneToolRequest event message is valid
func (msg *StandaloneToolRequestEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.ToolRunId == "" {
		return fmt.Errorf("tool_run_id is required")
	}
	if msg.ToolName == "" {
		return fmt.Errorf("tool_name is required")
	}
	if msg.ToolInput == nil {
		return fmt.Errorf("tool_input is required")
	}
	if msg.ToolURL == "" {
		return fmt.Errorf("tool_url is required")
	}

	return nil
}

type MCPToolRequestEventMessage struct {
}

// Subject returns the event subject for MCPToolRequest events
func (msg *MCPToolRequestEventMessage) Subject() EventSubject {
	return MCPToolRequestEventSubject
}

// Validate checks if the MCPToolRequest event message is valid
func (msg *MCPToolRequestEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	// No validation needed for cancel event
	return nil
}

type WebsocketResponseEventMessage struct {
	Message      anthropic.Message                                 `json:"message,omitempty"`
	Type         string                                            `json:"type"`
	Delta        anthropic.MessageStreamEventUnionDelta            `json:"delta,omitempty"`
	Usage        anthropic.MessageDeltaUsage                       `json:"usage,omitempty"`
	ContentBlock anthropic.ContentBlockStartEventContentBlockUnion `json:"content_block,omitempty"`
	Index        int64                                             `json:"index,omitempty"`
	Provider     db.ProviderModel                                  `json:"provider"`
}

// Subject returns the event subject for WebsocketResponse events
func (msg *WebsocketResponseEventMessage) Subject() EventSubject {
	return WebsocketResponseEventSubject
}

// Validate checks if the WebsocketResponse event message is valid
func (msg *WebsocketResponseEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.Type == "" {
		return fmt.Errorf("event type is required")
	}
	if msg.Provider == db.ProviderModelNil {
		return fmt.Errorf("provider is required")
	}

	return nil
}

// SubjectWithUser returns the subject with user ID appended for WebSocket routing
func (msg *WebsocketResponseEventMessage) SubjectWithUser(userID uuid.UUID) EventSubject {
	return EventSubject(WebsocketResponseEventSubject.String() + "." + userID.String())
}

type WebsocketTaskLifecycleEventMessage struct {
	Type     string    `json:"type"`
	TaskId   string    `json:"task_id,omitempty"`
	ThreadId uuid.UUID `json:"thread_id,omitempty"`
	Message  string    `json:"message,omitempty"`
}

// Subject returns the event subject for WebsocketTaskLifecycle events
func (msg *WebsocketTaskLifecycleEventMessage) Subject() EventSubject {
	return WebsocketTaskLifecycleEventSubject
}

// Validate checks if the WebsocketTaskLifecycle event message is valid
func (msg *WebsocketTaskLifecycleEventMessage) Validate() error {
	if msg == nil {
		return fmt.Errorf("message is nil")
	}
	if msg.Type == "" {
		return fmt.Errorf("type is required")
	}
	return nil
}

// SubjectWithUser returns the subject with user ID appended for WebSocket routing
func (msg *WebsocketTaskLifecycleEventMessage) SubjectWithUser(userID uuid.UUID) EventSubject {
	return EventSubject(WebsocketTaskLifecycleEventSubject.String() + "." + userID.String())
}
