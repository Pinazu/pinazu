name: Tagged Release

on:
  push:
    tags:
      - 'v*'

# This workflow handles versioned releases (tags like v1.0.0)
# For regular production releases, push to the 'release' branch instead

jobs:
  docker-multi-arch:
    name: Docker Multi-Arch Tagged Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/pinazu
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/pinazu:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
  
  publish-python:
    name: Publish to PyPI (Tagged Release)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build Python package
        working-directory: python/pinazu-py
        run: |
          echo "Building Pinazu Python Package"
          python -m build
      
      - name: Check package with twine
        working-directory: python/pinazu-py
        run: |
          twine check dist/*
      
      - name: Publish to PyPI
        working-directory: python/pinazu-py
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing Python package to PyPI"
          echo "Package version: $(grep '^version' pyproject.toml | cut -d'"' -f2)"
          twine upload dist/*
          echo "âœ… Python package published successfully to PyPI"
          echo "ðŸ“¦ Install with: pip install pinazu-py"
  
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [docker-multi-arch, publish-python]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate release notes
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREV_TAG" ]; then
            echo "notes=First release of Pinazu! ðŸŽ‰" >> $GITHUB_OUTPUT
          else
            # Generate changelog from commits
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
            echo "notes<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.notes }}
            
            ## Docker Images
            
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pinazu:${{ github.ref_name }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/pinazu:latest
            ```
            
            **Architectures:** `linux/amd64`, `linux/arm64`
            
            ## Python Package
            
            ```bash
            pip install pinazu-py
            ```
            
            ## Installation
            
            See [README.md](https://github.com/Pinazu/pinazu#installation) for installation instructions.
          draft: false
          prerelease: false
