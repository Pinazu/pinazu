name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  AWS_REGION: ap-southeast-1
  POSTGRES_USER: pinazu
  POSTGRES_PASSWORD: example_password
  POSTGRES_DB: pinazu
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  # Dummy manual job equivalent - GitHub Actions doesn't have manual triggers in the same way
  # This can be triggered via workflow_dispatch if needed
  
  # Optional: SonarQube/SonarCloud SAST (uncomment and configure if needed)
  sonarqube-sast:
    name: SonarQube SAST
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'main') ||
      github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && github.base_ref == 'main'
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: pinazu
          POSTGRES_PASSWORD: example_password
          POSTGRES_DB: pinazu
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      nats:
        image: nats:linux
        ports:
          - 4222:4222
          - 8222:8222
        options: >-
          --entrypoint nats-server
        # Add command arguments for JetStream
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      
      - name: Run database migrations
        env:
          POSTGRES_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}?sslmode=disable
        run: |
          echo "Running Database Migrations against Postgres"
          go run sql/ci/main.go
      
      - name: Run unit tests
        env:
          POSTGRES_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}?sslmode=disable
          NATS_URL: nats://localhost:4222
          # Add your API keys for testing if needed (store in GitHub Secrets)
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "Running Unit Tests"
          go test -v ./...
      
      - name: Build Pinazu CLI
        run: |
          echo "Building Pinazu CLI"
          CGO_ENABLED=0 go build -o ./dist/pinazu ./cmd/
      
      - name: Upload Pinazu CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: pinazu-cli
          path: dist/pinazu
          retention-days: 1

  e2e-test:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: unit-test
    if: |
      github.event_name == 'pull_request' && github.base_ref == 'main'
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: pinazu
          POSTGRES_PASSWORD: example_password
          POSTGRES_DB: pinazu
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      nats:
        image: nats:linux
        ports:
          - 4222:4222
          - 8222:8222
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Pinazu CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: pinazu-cli
          path: dist
      
      - name: Make Pinazu CLI executable
        run: chmod +x dist/pinazu
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: e2e/package-lock.json
      
      - name: Prepare test config
        run: |
          # Copy test config and optionally inject secrets
          cp configs/config.test.yaml /tmp/config.test.yaml
          
          # If you need to inject API keys from secrets, uncomment and modify:
          # sed -i 's/${GOOGLE_API_KEY}/${{ secrets.GOOGLE_API_KEY }}/g' /tmp/config.test.yaml
          # sed -i 's/ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g' /tmp/config.test.yaml
      
      - name: Start Pinazu server
        run: |
          ./dist/pinazu serve all --config /tmp/config.test.yaml &
          PINAZU_PID=$!
          echo "PINAZU_PID=$PINAZU_PID" >> $GITHUB_ENV
          echo "Waiting for Pinazu server to start with process ID $PINAZU_PID"
          sleep 10
      
      - name: Install e2e dependencies
        working-directory: e2e
        run: npm ci
      
      - name: Run e2e tests
        working-directory: e2e
        run: npm run test
      
      - name: Stop Pinazu server
        if: always()
        run: kill ${{ env.PINAZU_PID }} || true

  build-python:
    name: Build and Publish Python Package
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.base_ref == 'main') ||
      startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build Python package
        working-directory: python/pinazu-py
        run: |
          echo "Building Pinazu Python Package"
          python -m build
      
      - name: Check package with twine
        working-directory: python/pinazu-py
        run: |
          twine check dist/*
      
      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        working-directory: python/pinazu-py
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "Publishing Python package to PyPI"
          echo "Package version: $(grep '^version' pyproject.toml | cut -d'"' -f2)"
          twine upload dist/*
          echo "‚úÖ Python package published successfully to PyPI"
          echo "üì¶ Install with: pip install pinazu-py"
      
      - name: Publish to Test PyPI
        if: |
          github.event_name == 'push' && 
          github.ref == 'refs/heads/main' &&
          secrets.TEST_PYPI_API_TOKEN != ''
        working-directory: python/pinazu-py
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          echo "Publishing Python package to Test PyPI"
          twine upload --repository testpypi dist/* 2>&1 || {
            echo "‚ö†Ô∏è Upload to Test PyPI failed"
            echo "This is normal if:"
            echo "  - Version already exists on Test PyPI"
            echo "  - TEST_PYPI_API_TOKEN is not configured"
            echo "  - Token has special characters (copy/paste issue)"
            exit 0
          }
        continue-on-error: true

  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'pull_request' && github.base_ref == 'main') ||
      startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pinazu
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/pinazu:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true
