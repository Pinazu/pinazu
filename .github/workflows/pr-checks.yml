name: PR Checks

on:
  pull_request:
    branches:
      - main

env:
  POSTGRES_USER: pinazu
  POSTGRES_PASSWORD: example_password
  POSTGRES_DB: pinazu
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432

jobs:
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: pinazu
          POSTGRES_PASSWORD: example_password
          POSTGRES_DB: pinazu
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      nats:
        image: nats:linux
        ports:
          - 4222:4222
          - 8222:8222
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true
      
      - name: Run database migrations
        env:
          POSTGRES_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}?sslmode=disable
        run: |
          echo "Running Database Migrations against Postgres"
          go run sql/ci/main.go
      
      - name: Run unit tests
        env:
          POSTGRES_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}?sslmode=disable
          NATS_URL: nats://localhost:4222
        run: |
          echo "Running Unit Tests"
          go test -v -race -coverprofile=coverage.out ./...
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true
      
      - name: Build Pinazu CLI
        run: |
          echo "Building Pinazu CLI"
          CGO_ENABLED=0 go build -o ./dist/pinazu ./cmd/
      
      - name: Upload Pinazu CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: pinazu-cli
          path: dist/pinazu
          retention-days: 1

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-test
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: pinazu
          POSTGRES_PASSWORD: example_password
          POSTGRES_DB: pinazu
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      nats:
        image: nats:linux
        ports:
          - 4222:4222
          - 8222:8222
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Pinazu CLI artifact
        uses: actions/download-artifact@v4
        with:
          name: pinazu-cli
          path: dist
      
      - name: Make Pinazu CLI executable
        run: chmod +x dist/pinazu
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: e2e/package-lock.json
      
      - name: Prepare test config
        run: |
          cp configs/config.test.yaml /tmp/config.test.yaml
      
      - name: Start Pinazu server
        run: |
          ./dist/pinazu serve all --config /tmp/config.test.yaml &
          PINAZU_PID=$!
          echo "PINAZU_PID=$PINAZU_PID" >> $GITHUB_ENV
          echo "Waiting for Pinazu server to start with process ID $PINAZU_PID"
          sleep 10
      
      - name: Install e2e dependencies
        working-directory: e2e
        run: npm ci
      
      - name: Run e2e tests
        working-directory: e2e
        run: npm run test
      
      - name: Stop Pinazu server
        if: always()
        run: kill ${{ env.PINAZU_PID }} || true

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image (AMD64 only for PR)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: pinazu:pr-${{ github.event.pull_request.number }}

  sonarqube-sast:
    name: SonarQube SAST
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
